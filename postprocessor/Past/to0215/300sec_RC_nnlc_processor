{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"300sec_RC_nnlc_processor","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"WOkcqUr1x7Gk"},"source":["**Postprocessor about KKT residual**"]},{"cell_type":"markdown","metadata":{"id":"lhtGDVuay1aC"},"source":["# Overall preliminaries"]},{"cell_type":"code","metadata":{"id":"J_v63uV-xx0H","executionInfo":{"status":"ok","timestamp":1613222585113,"user_tz":-540,"elapsed":877,"user":{"displayName":"Mitsuaki Obara","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgTc8J_ZbYtCo4EduXT-CtVU_yA3tGcM2yJdBrd=s64","userId":"01228617048231420770"}}},"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import math"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"ibRpNxX4yBfs","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1613222616286,"user_tz":-540,"elapsed":32039,"user":{"displayName":"Mitsuaki Obara","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgTc8J_ZbYtCo4EduXT-CtVU_yA3tGcM2yJdBrd=s64","userId":"01228617048231420770"}},"outputId":"e9c51f79-0a5b-4fa5-ebd9-ee8d6c3d830b"},"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","root_dir=\"/content/drive/My Drive/Codes/Seqential-quadratic-programming-on-manifold/\"\n","output_dir = \"postprocessor/300sec_RC_nnlc/\""],"execution_count":2,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"JCHXIkSlyFbH"},"source":["# 300sec_RC_nn processor\n"]},{"cell_type":"markdown","metadata":{"id":"wnqV7podytig"},"source":["## Preliminaries"]},{"cell_type":"code","metadata":{"id":"HWwmTO_8yErG","executionInfo":{"status":"ok","timestamp":1613222789941,"user_tz":-540,"elapsed":787,"user":{"displayName":"Mitsuaki Obara","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgTc8J_ZbYtCo4EduXT-CtVU_yA3tGcM2yJdBrd=s64","userId":"01228617048231420770"}}},"source":["rep = 1\n","dim_set = [[4,8], [5,10], [6,12], [7,14]]\n","rank_set = [2]\n","eqratio_set = [0.7, 0.5]\n","maskratio_set = [0.7,0.3]\n","tol = 16\n","init_tolcheckpow = -3\n","method_set = ['ALM', 'LQH', 'LSE', 'Riemannian_SQP']\n","input_dir = \"result/300sec_RC_nnlc/\""],"execution_count":3,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"y5zj3ppxSl2X"},"source":["## ResItes, ResIter, AveTime Tables"]},{"cell_type":"code","metadata":{"id":"bNGsHgTsQAw2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1613222860450,"user_tz":-540,"elapsed":43407,"user":{"displayName":"Mitsuaki Obara","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgTc8J_ZbYtCo4EduXT-CtVU_yA3tGcM2yJdBrd=s64","userId":"01228617048231420770"}},"outputId":"9a199181-ce15-4259-c446-6e064d7f1ebe"},"source":["for maskratio in maskratio_set:\n","  for eqratio in eqratio_set:\n","    for rank in rank_set:\n","      ave_time_output = pd.DataFrame()\n","      for dim in dim_set:\n","        time_output = pd.DataFrame()\n","        iter_output = pd.DataFrame()\n","        ave_time_in_dim = pd.DataFrame()\n","        rdim = dim[0]\n","        cdim = dim[1]\n","\n","        for method in method_set:\n","          data = pd.read_csv(root_dir + input_dir + \"RC_nnlc_%s_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" %(method, rep, rdim, cdim, rank, tol, eqratio, maskratio))\n","          cols = data[['KKT_residual', 'time', 'iter']].copy()\n","          cols.name = method\n","          \n","          tolcheckpow = init_tolcheckpow\n","          time = []\n","          iter = []\n","\n","          ncol = cols.shape[0]\n","          while True:\n","            flag = False\n","            for i in range(ncol):\n","              if (data['KKT_residual'][i] < pow(10, -tolcheckpow)):\n","                time += [data['time'][i]]\n","                iter += [data['iter'][i]]\n","                tolcheckpow += 1\n","                flag = True\n","                break\n","            if not flag:\n","              break\n","\n","          time_outputcol = pd.Series(data = np.array(time), name = method)\n","          time_output = pd.concat([time_output, time_outputcol], axis = 1)\n","          iter_outputcol = pd.Series(data = np.array(iter), name = method)\n","          iter_output = pd.concat([iter_output, iter_outputcol], axis = 1)\n","\n","          total_time = data['time'][-1:].values[0]\n","          total_iter_num = data['time'][-1:].index[0]\n","          ave_time = total_time / total_iter_num\n","          #print(ave_time)\n","          ave_time_in_dim.insert(len(ave_time_in_dim.columns), method, [ave_time])\n","          #print(ave_time_in_dim)\n","\n","          # ave_time_output = pd.concat([ave_time_output, ave_time_outputcol], axis = 1)\n","        \n","        ave_time_in_dim[\"dim\"] = str(dim)\n","        ave_time_output = pd.concat([ave_time_output, ave_time_in_dim], axis = 0)\n","        time_fintotal_checkpow = time_output.shape[0] + init_tolcheckpow\n","        time_output[\"log10residual\"] = pd.RangeIndex(start = init_tolcheckpow, stop = time_fintotal_checkpow)\n","        iter_fintotal_checkpow = iter_output.shape[0] + init_tolcheckpow\n","        iter_output[\"log10residual\"] = pd.RangeIndex(start = init_tolcheckpow, stop = iter_fintotal_checkpow)\n","\n","        print(time_output)\n","        time_output.to_csv(root_dir + output_dir + \"300sec_RC_nnlc_ResTimeTable_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" %(rep, rdim, cdim, rank, tol, eqratio, maskratio))\n","        print(iter_output)\n","        iter_output.to_csv(root_dir + output_dir + \"300sec_RC_nnlc_ResIterTable_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" %(rep, rdim, cdim, rank, tol, eqratio, maskratio))\n","\n","      print(ave_time_output)\n","      ave_time_output.to_csv(root_dir + output_dir + \"300sec_RC_nnlc_WholeAveTimeTable_nrep%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" %(rep, rank, tol, eqratio, maskratio))"],"execution_count":4,"outputs":[{"output_type":"stream","text":["       ALM        LQH        LSE  Riemannian_SQP  log10residual\n","0   0.0000    0.00000    0.00000        0.000167             -3\n","1   0.0000    0.00000    0.00000        0.000167             -2\n","2   0.0000    0.00000    0.00000        0.000167             -1\n","3   2.1120    0.00000    0.00000        0.348160              0\n","4   4.3826    0.13053    0.28608        0.433340              1\n","5   5.9452    1.54720    1.22970        0.500080              2\n","6   6.3145    1.54720    1.41540       16.388900              3\n","7   6.9827    1.54720    1.59920       16.388900              4\n","8   7.8275    1.56510    1.72510       16.444600              5\n","9   8.5749    1.64810    1.83170       16.444600              6\n","10  9.2295  106.88540  204.09480       16.444600              7\n","11     NaN  107.18060        NaN       16.500600              8\n","12     NaN        NaN        NaN       28.787900              9\n","     ALM     LQH     LSE  Riemannian_SQP  log10residual\n","0    0.0     0.0     0.0               0             -3\n","1    0.0     0.0     0.0               0             -2\n","2    0.0     0.0     0.0               0             -1\n","3    2.0     0.0     0.0               1              0\n","4    4.0     1.0     1.0               2              1\n","5    6.0     4.0     3.0               3              2\n","6    8.0     4.0     4.0             232              3\n","7   12.0     4.0     5.0             232              4\n","8   17.0     5.0     6.0             233              5\n","9   22.0     8.0     8.0             233              6\n","10  27.0  4910.0  8448.0             233              7\n","11   NaN  4924.0     NaN             234              8\n","12   NaN     NaN     NaN             458              9\n","        ALM  LQH     LSE  Riemannian_SQP  log10residual\n","0    0.0000  0.0  0.0000        0.000199             -3\n","1    0.0000  0.0  0.0000        0.000199             -2\n","2    0.0000  0.0  0.0000        0.000199             -1\n","3    1.7076  0.0  1.8771             NaN              0\n","4    9.3840  NaN  3.4201             NaN              1\n","5   11.0679  NaN     NaN             NaN              2\n","6   11.7527  NaN     NaN             NaN              3\n","7   13.4034  NaN     NaN             NaN              4\n","8   15.5909  NaN     NaN             NaN              5\n","9   17.1649  NaN     NaN             NaN              6\n","10  18.3486  NaN     NaN             NaN              7\n","    ALM  LQH  LSE  Riemannian_SQP  log10residual\n","0     0  0.0  0.0             0.0             -3\n","1     0  0.0  0.0             0.0             -2\n","2     0  0.0  0.0             0.0             -1\n","3     2  0.0  1.0             NaN              0\n","4     8  NaN  2.0             NaN              1\n","5    10  NaN  NaN             NaN              2\n","6    12  NaN  NaN             NaN              3\n","7    18  NaN  NaN             NaN              4\n","8    27  NaN  NaN             NaN              5\n","9    36  NaN  NaN             NaN              6\n","10   46  NaN  NaN             NaN              7\n","        ALM     LQH      LSE  Riemannian_SQP  log10residual\n","0    0.0000  0.0000  0.00000        0.000035             -3\n","1    0.0000  0.0000  0.00000        0.000035             -2\n","2    0.0000  0.0000  0.00000        0.000035             -1\n","3    2.7310  0.0000  0.00000        0.197790              0\n","4   10.7321  0.0000  0.18219        0.197790              1\n","5       NaN  0.0000  1.37650        0.197790              2\n","6       NaN  0.0000  2.81790        0.197790              3\n","7       NaN  0.0000  3.88430        0.197790              4\n","8       NaN  0.0000  4.19190        0.197790              5\n","9       NaN  0.0000  7.08610        0.197790              6\n","10      NaN  2.6924  8.96890        0.381220              7\n","11      NaN     NaN      NaN        0.381220              8\n","12      NaN     NaN      NaN        0.381220              9\n","13      NaN     NaN      NaN        0.565740             10\n","    ALM   LQH    LSE  Riemannian_SQP  log10residual\n","0   0.0   0.0    0.0               0             -3\n","1   0.0   0.0    0.0               0             -2\n","2   0.0   0.0    0.0               0             -1\n","3   2.0   0.0    0.0               1              0\n","4   8.0   0.0    1.0               1              1\n","5   NaN   0.0    6.0               1              2\n","6   NaN   0.0   10.0               1              3\n","7   NaN   0.0   13.0               1              4\n","8   NaN   0.0   14.0               1              5\n","9   NaN   0.0   80.0               1              6\n","10  NaN  83.0  123.0               2              7\n","11  NaN   NaN    NaN               2              8\n","12  NaN   NaN    NaN               2              9\n","13  NaN   NaN    NaN               3             10\n","        ALM      LQH      LSE  Riemannian_SQP  log10residual\n","0   0.00000  0.00000  0.00000        0.000033             -3\n","1   0.00000  0.00000  0.00000        0.000033             -2\n","2   0.00000  0.00000  0.00000        0.000033             -1\n","3   0.70891  0.33521  0.41698             NaN              0\n","4   1.00450  0.33521  0.58053             NaN              1\n","5   1.51350  0.33521  0.94587             NaN              2\n","6   2.57240  0.33521  1.36930             NaN              3\n","7   3.48940  0.42868  1.55080             NaN              4\n","8   4.23840  0.53092  1.71460             NaN              5\n","9   4.75190  0.61635  1.79640             NaN              6\n","10  5.09410  0.81202  2.18800             NaN              7\n","11  5.29200  1.26100      NaN             NaN              8\n","    ALM  LQH   LSE  Riemannian_SQP  log10residual\n","0     0    0   0.0             0.0             -3\n","1     0    0   0.0             0.0             -2\n","2     0    0   0.0             0.0             -1\n","3     3    1   1.0             NaN              0\n","4     5    1   2.0             NaN              1\n","5     8    1   4.0             NaN              2\n","6    13    1   6.0             NaN              3\n","7    18    3   7.0             NaN              4\n","8    23    6   8.0             NaN              5\n","9    28    8   9.0             NaN              6\n","10   33   14  18.0             NaN              7\n","11   38   26   NaN             NaN              8\n","        ALM       LQH       LSE  Riemannian_SQP      dim\n","0  0.725311  0.021773  0.024085        0.056073   [4, 8]\n","0  0.723482  0.126518  0.072540        0.418390  [5, 10]\n","0  0.853383  0.034652  0.064760        0.186859  [6, 12]\n","0  0.733126  0.043308  0.054540        0.939339  [7, 14]\n","        ALM      LQH      LSE  Riemannian_SQP  log10residual\n","0    0.0000  0.00000  0.00000        0.000042             -3\n","1    0.0000  0.00000  0.00000        0.000042             -2\n","2    0.0000  0.00000  0.00000        0.000042             -1\n","3    1.7638  0.10393  0.19451        0.063798              0\n","4    6.7237  0.10393  0.19451        0.184090              1\n","5   16.5699  0.10393  0.69840        0.305250              2\n","6       NaN  0.10393  1.29890        0.365350              3\n","7       NaN  0.27444  1.62520        0.426890              4\n","8       NaN  0.31762  1.93050        0.426890              5\n","9       NaN  0.51073  2.02200        0.487680              6\n","10      NaN      NaN      NaN        0.546190              7\n","11      NaN      NaN      NaN        0.603520              8\n","12      NaN      NaN      NaN        0.661870              9\n","     ALM  LQH  LSE  Riemannian_SQP  log10residual\n","0    0.0  0.0  0.0               0             -3\n","1    0.0  0.0  0.0               0             -2\n","2    0.0  0.0  0.0               0             -1\n","3    2.0  1.0  1.0               1              0\n","4    7.0  1.0  1.0               3              1\n","5   16.0  1.0  4.0               5              2\n","6    NaN  1.0  6.0               6              3\n","7    NaN  4.0  7.0               7              4\n","8    NaN  5.0  8.0               7              5\n","9    NaN  7.0  9.0               8              6\n","10   NaN  NaN  NaN               9              7\n","11   NaN  NaN  NaN              10              8\n","12   NaN  NaN  NaN              11              9\n","        ALM     LQH       LSE  Riemannian_SQP  log10residual\n","0    0.0000  0.0000    0.0000        0.000121             -3\n","1    0.0000  0.0000    0.0000        0.000121             -2\n","2    0.0000  0.0000    0.0000        0.000121             -1\n","3    2.3047  1.2647    1.6618        0.124090              0\n","4    5.4459  1.2647    1.6618        0.237900              1\n","5    7.9381  2.9855    8.8314        1.043400              2\n","6    9.1270  2.9855   21.9326        1.043400              3\n","7   14.9235  3.0006   31.8244        1.157100              4\n","8   19.9935  3.0910  202.3897        1.270000              5\n","9   24.4864  3.2276       NaN        1.270000              6\n","10      NaN     NaN       NaN        1.270000              7\n","11      NaN     NaN       NaN        1.270000              8\n","     ALM  LQH     LSE  Riemannian_SQP  log10residual\n","0    0.0  0.0     0.0               0             -3\n","1    0.0  0.0     0.0               0             -2\n","2    0.0  0.0     0.0               0             -1\n","3    2.0  1.0     1.0               1              0\n","4    5.0  1.0     1.0               2              1\n","5    8.0  3.0     6.0               9              2\n","6   10.0  3.0    14.0               9              3\n","7   16.0  4.0    20.0              10              4\n","8   22.0  6.0  4975.0              11              5\n","9   28.0  8.0     NaN              11              6\n","10   NaN  NaN     NaN              11              7\n","11   NaN  NaN     NaN              11              8\n","       ALM      LQH     LSE  Riemannian_SQP  log10residual\n","0   0.0000  0.00000  0.0000        0.000031             -3\n","1   0.0000  0.00000  0.0000        0.000031             -2\n","2   0.0000  0.00000  0.0000        0.000031             -1\n","3   2.7618  0.29514  1.9527        0.402830              0\n","4      NaN      NaN     NaN        1.602400              1\n","5      NaN      NaN     NaN        2.951900              2\n","6      NaN      NaN     NaN        4.071000              3\n","7      NaN      NaN     NaN        5.209900              4\n","8      NaN      NaN     NaN        6.534100              5\n","9      NaN      NaN     NaN        7.652800              6\n","10     NaN      NaN     NaN        8.828700              7\n","11     NaN      NaN     NaN       10.154000              8\n","12     NaN      NaN     NaN       11.298800              9\n","13     NaN      NaN     NaN       12.400000             10\n","14     NaN      NaN     NaN       13.883500             11\n","    ALM  LQH  LSE  Riemannian_SQP  log10residual\n","0   0.0  0.0  0.0               0             -3\n","1   0.0  0.0  0.0               0             -2\n","2   0.0  0.0  0.0               0             -1\n","3   2.0  1.0  1.0               2              0\n","4   NaN  NaN  NaN               8              1\n","5   NaN  NaN  NaN              15              2\n","6   NaN  NaN  NaN              21              3\n","7   NaN  NaN  NaN              27              4\n","8   NaN  NaN  NaN              34              5\n","9   NaN  NaN  NaN              40              6\n","10  NaN  NaN  NaN              46              7\n","11  NaN  NaN  NaN              53              8\n","12  NaN  NaN  NaN              59              9\n","13  NaN  NaN  NaN              65             10\n","14  NaN  NaN  NaN              73             11\n","      ALM      LQH      LSE  Riemannian_SQP  log10residual\n","0  0.0000  0.00000  0.00000        0.000032             -3\n","1  0.0000  0.00000  0.00000        0.000032             -2\n","2  0.0000  0.00000  0.00000        0.000032             -1\n","3  1.9867  0.13460  0.23326             NaN              0\n","4     NaN  0.13460  0.43454             NaN              1\n","5     NaN  0.13460  1.43060             NaN              2\n","6     NaN  0.13460  1.82840             NaN              3\n","7     NaN  0.20576  2.60280             NaN              4\n","8     NaN  0.36333  2.60280             NaN              5\n","9     NaN  0.54883  2.87150             NaN              6\n","   ALM  LQH  LSE  Riemannian_SQP  log10residual\n","0  0.0    0    0             0.0             -3\n","1  0.0    0    0             0.0             -2\n","2  0.0    0    0             0.0             -1\n","3  2.0    1    1             NaN              0\n","4  NaN    1    2             NaN              1\n","5  NaN    1    5             NaN              2\n","6  NaN    1    6             NaN              3\n","7  NaN    3    8             NaN              4\n","8  NaN    6    8             NaN              5\n","9  NaN    8    9             NaN              6\n","        ALM       LQH       LSE  Riemannian_SQP      dim\n","0  0.746595  0.019729  0.023841        0.057468   [4, 8]\n","0  0.761901  0.025985  0.037862        0.114282  [5, 10]\n","0  0.852178  0.036565  0.535078        0.190551  [6, 12]\n","0  0.867340  0.040489  0.054170        1.178391  [7, 14]\n","        ALM       LQH     LSE  Riemannian_SQP  log10residual\n","0   0.00000  0.000000  0.0000        0.000070             -3\n","1   0.00000  0.000000  0.0000        0.000070             -2\n","2   0.00000  0.000000  0.0000        0.000070             -1\n","3   0.76377  0.000000  0.0000        0.080737              0\n","4   0.84113  0.099533  1.1253        0.229240              1\n","5   0.96026  0.099533  1.1253        1.371900              2\n","6   1.01680  0.099533  1.1825        1.862800              3\n","7   1.12540  0.131870  1.2165        1.921300              4\n","8   1.21350  0.211690  1.3016        1.921300              5\n","9   1.25550  0.314460  1.3869        1.980600              6\n","10  1.32150  0.314460     NaN        1.980600              7\n","11  1.36980       NaN     NaN        1.980600              8\n","12      NaN       NaN     NaN        5.573600              9\n","     ALM  LQH  LSE  Riemannian_SQP  log10residual\n","0    0.0  0.0  0.0               0             -3\n","1    0.0  0.0  0.0               0             -2\n","2    0.0  0.0  0.0               0             -1\n","3    2.0  0.0  0.0               1              0\n","4    3.0  1.0  1.0               3              1\n","5    5.0  1.0  1.0              19              2\n","6    6.0  1.0  2.0              27              3\n","7    8.0  3.0  3.0              28              4\n","8   10.0  6.0  6.0              28              5\n","9   11.0  8.0  8.0              29              6\n","10  13.0  8.0  NaN              29              7\n","11  16.0  NaN  NaN              29              8\n","12   NaN  NaN  NaN              88              9\n","      ALM      LQH      LSE  Riemannian_SQP  log10residual\n","0   0.000  0.00000   0.0000        0.000038             -3\n","1   0.000  0.00000   0.0000        0.000038             -2\n","2   0.000  0.00000   0.0000        0.000038             -1\n","3   1.710  0.00000   1.3824        0.127160              0\n","4   3.807  0.60572   1.3824        0.492980              1\n","5     NaN  0.60572   5.3753        1.691300              2\n","6     NaN  0.60572   9.3095        1.807300              3\n","7     NaN  0.78282  10.4496        1.807300              4\n","8     NaN  0.87158  10.9484        1.930400              5\n","9     NaN  1.08660  11.4837        2.505600              6\n","10    NaN      NaN  11.4837        3.840000              7\n","11    NaN      NaN      NaN        7.464200              8\n","12    NaN      NaN      NaN       45.434100              9\n","13    NaN      NaN      NaN      249.215600             10\n","    ALM  LQH   LSE  Riemannian_SQP  log10residual\n","0   0.0  0.0   0.0               0             -3\n","1   0.0  0.0   0.0               0             -2\n","2   0.0  0.0   0.0               0             -1\n","3   2.0  0.0   1.0               1              0\n","4   4.0  1.0   1.0               4              1\n","5   NaN  1.0   4.0              14              2\n","6   NaN  1.0   7.0              15              3\n","7   NaN  4.0   9.0              15              4\n","8   NaN  5.0  10.0              16              5\n","9   NaN  8.0  11.0              21              6\n","10  NaN  NaN  11.0              33              7\n","11  NaN  NaN   NaN              65              8\n","12  NaN  NaN   NaN             403              9\n","13  NaN  NaN   NaN            2196             10\n","        ALM        LQH     LSE  Riemannian_SQP  log10residual\n","0    0.0000    0.00000  0.0000         0.00003             -3\n","1    0.0000    0.00000  0.0000         0.00003             -2\n","2    0.0000    0.00000  0.0000         0.00003             -1\n","3    2.5505    0.38809  1.8574         0.20958              0\n","4    5.3834    0.38809  1.8574         0.99985              1\n","5    7.7626    0.38809  3.8488         3.50460              2\n","6    8.1605    0.38809  5.5796         4.07900              3\n","7    8.9742    0.67786  7.3546         4.07900              4\n","8    9.4161    1.09070  8.1721         4.44520              5\n","9   10.0299    1.19380  8.1721         5.96630              6\n","10  10.2386  180.59600     NaN         9.33990              7\n","11      NaN        NaN     NaN       105.28750              8\n","12      NaN        NaN     NaN       263.52680              9\n","     ALM     LQH  LSE  Riemannian_SQP  log10residual\n","0    0.0     0.0  0.0               0             -3\n","1    0.0     0.0  0.0               0             -2\n","2    0.0     0.0  0.0               0             -1\n","3    2.0     1.0  1.0               1              0\n","4    4.0     1.0  1.0               5              1\n","5    7.0     1.0  3.0              18              2\n","6    8.0     1.0  6.0              21              3\n","7   10.0     4.0  8.0              21              4\n","8   11.0     6.0  9.0              23              5\n","9   13.0     7.0  9.0              31              6\n","10  14.0  5912.0  NaN              49              7\n","11   NaN     NaN  NaN             517              8\n","12   NaN     NaN  NaN            1363              9\n","       ALM      LQH     LSE  Riemannian_SQP  log10residual\n","0   0.0000  0.00000  0.0000        0.000032             -3\n","1   0.0000  0.00000  0.0000        0.000032             -2\n","2   0.0000  0.00000  0.0000        0.000032             -1\n","3   3.2698  0.00000  2.0601             NaN              0\n","4  12.0849  0.74891  4.3896             NaN              1\n","   ALM  LQH  LSE  Riemannian_SQP  log10residual\n","0    0    0    0             0.0             -3\n","1    0    0    0             0.0             -2\n","2    0    0    0             0.0             -1\n","3    2    0    1             NaN              0\n","4    8    1    2             NaN              1\n","        ALM       LQH       LSE  Riemannian_SQP      dim\n","0  0.707169  0.020424  0.024193        0.059176   [4, 8]\n","0  0.786159  0.025611  0.085386        0.113472  [5, 10]\n","0  0.780544  0.030299  0.043010        0.192469  [6, 12]\n","0  0.854174  0.041928  0.981052        0.695852  [7, 14]\n","       ALM       LQH     LSE  Riemannian_SQP  log10residual\n","0   0.0000  0.000000  0.0000        0.000044             -3\n","1   0.0000  0.000000  0.0000        0.000044             -2\n","2   0.0000  0.000000  0.0000        0.000044             -1\n","3   1.5398  0.000000  1.1981        0.067994              0\n","4   1.6408  0.063318  1.1981        0.382750              1\n","5   1.8326  0.063318  2.4903        0.747570              2\n","6   2.0125  0.063318  2.7164        0.807050              3\n","7   2.0868  0.144560  2.8463        0.865470              4\n","8   2.2314  0.197220  2.8627        0.865470              5\n","9   2.2896  0.305360  2.9519        0.865470              6\n","10  2.4089       NaN     NaN        0.923680              7\n","11  2.4478       NaN     NaN        2.820000              8\n","12     NaN       NaN     NaN      165.292900              9\n","13     NaN       NaN     NaN      186.007800             10\n","     ALM  LQH  LSE  Riemannian_SQP  log10residual\n","0    0.0  0.0  0.0               0             -3\n","1    0.0  0.0  0.0               0             -2\n","2    0.0  0.0  0.0               0             -1\n","3    2.0  0.0  1.0               1              0\n","4    3.0  1.0  1.0               6              1\n","5    5.0  1.0  2.0              12              2\n","6    7.0  1.0  4.0              13              3\n","7    8.0  4.0  5.0              14              4\n","8   10.0  6.0  6.0              14              5\n","9   11.0  8.0  7.0              14              6\n","10  13.0  NaN  NaN              15              7\n","11  15.0  NaN  NaN              47              8\n","12   NaN  NaN  NaN            2821              9\n","13   NaN  NaN  NaN            3174             10\n","       ALM        LQH     LSE  Riemannian_SQP  log10residual\n","0   0.0000    0.00000  0.0000        0.000031             -3\n","1   0.0000    0.00000  0.0000        0.000031             -2\n","2   0.0000    0.00000  0.0000        0.000031             -1\n","3   2.0688    0.00000  1.3894        0.115950              0\n","4   2.2390    0.18201  1.3894        0.590250              1\n","5   2.3123    0.18201  3.5824        2.805700              2\n","6   2.4241    0.95447  4.7940        4.284700              3\n","7   2.4565    2.90150  5.8299        4.397700              4\n","8   2.5485  102.80170  6.5855        4.397700              5\n","9   2.5733        NaN  6.5855        4.397700              6\n","10  2.6531        NaN  7.0271        5.804100              7\n","11  2.6839        NaN     NaN       10.705400              8\n","12  2.7220        NaN     NaN      298.208900              9\n","13  2.8491        NaN     NaN             NaN             10\n","    ALM     LQH   LSE  Riemannian_SQP  log10residual\n","0     0     0.0   0.0             0.0             -3\n","1     0     0.0   0.0             0.0             -2\n","2     0     0.0   0.0             0.0             -1\n","3     2     0.0   1.0             1.0              0\n","4     4     1.0   1.0             5.0              1\n","5     5     1.0   4.0            23.0              2\n","6     7     7.0   6.0            35.0              3\n","7     8    13.0   8.0            36.0              4\n","8    10  4259.0   9.0            36.0              5\n","9    11     NaN   9.0            36.0              6\n","10   13     NaN  11.0            48.0              7\n","11   15     NaN   NaN            90.0              8\n","12   18     NaN   NaN          2632.0              9\n","13   27     NaN   NaN             NaN             10\n","        ALM      LQH      LSE  Riemannian_SQP  log10residual\n","0    0.0000  0.00000   0.0000        0.000038             -3\n","1    0.0000  0.00000   0.0000        0.000038             -2\n","2    0.0000  0.00000   0.0000        0.000038             -1\n","3    2.4374  0.29649   1.3948        0.195780              0\n","4    2.9433  0.29649   1.3948        0.769030              1\n","5    3.0917  0.29649   3.0562        3.407400              2\n","6    4.8202  0.29649   4.1346        6.485200              3\n","7   11.3303  0.52175   5.3122        7.677700              4\n","8   17.9453  5.69050  34.0728        9.274500              5\n","9   17.9453  5.69050      NaN        9.659400              6\n","10      NaN      NaN      NaN       10.811900              7\n","11      NaN      NaN      NaN       18.485000              8\n","12      NaN      NaN      NaN       52.319800              9\n","     ALM  LQH   LSE  Riemannian_SQP  log10residual\n","0    0.0  0.0   0.0               0             -3\n","1    0.0  0.0   0.0               0             -2\n","2    0.0  0.0   0.0               0             -1\n","3    2.0  1.0   1.0               1              0\n","4    4.0  1.0   1.0               4              1\n","5    5.0  1.0   3.0              17              2\n","6    8.0  1.0   4.0              32              3\n","7   13.0  4.0   5.0              38              4\n","8   19.0  8.0  44.0              46              5\n","9   19.0  8.0   NaN              48              6\n","10   NaN  NaN   NaN              54              7\n","11   NaN  NaN   NaN              94              8\n","12   NaN  NaN   NaN             262              9\n","        ALM      LQH      LSE  Riemannian_SQP  log10residual\n","0    0.0000  0.00000   0.0000        0.000033             -3\n","1    0.0000  0.00000   0.0000        0.000033             -2\n","2    0.0000  0.00000   0.0000        0.000033             -1\n","3    2.8303  0.00000   2.3829        0.294650              0\n","4    6.9074  0.61688   2.3829        1.575900              1\n","5    6.9074  0.61688   7.0858        5.337800              2\n","6   10.3744  0.61688   8.7312        5.337800              3\n","7   11.4527  0.84106   9.9238        5.624600              4\n","8   11.4527  1.02020  10.7697        5.927700              5\n","9   11.8924  1.76930  11.3448        6.233300              6\n","10  12.3253      NaN      NaN       30.239900              7\n","11      NaN      NaN      NaN       40.962500              8\n","12      NaN      NaN      NaN      158.239700              9\n","     ALM  LQH  LSE  Riemannian_SQP  log10residual\n","0    0.0  0.0  0.0               0             -3\n","1    0.0  0.0  0.0               0             -2\n","2    0.0  0.0  0.0               0             -1\n","3    2.0  0.0  1.0               1              0\n","4    5.0  1.0  1.0               5              1\n","5    5.0  1.0  3.0              17              2\n","6    8.0  1.0  4.0              17              3\n","7    9.0  4.0  5.0              18              4\n","8    9.0  6.0  6.0              19              5\n","9   10.0  8.0  8.0              20              6\n","10  11.0  NaN  NaN              96              7\n","11   NaN  NaN  NaN             132              8\n","12   NaN  NaN  NaN             529              9\n","        ALM       LQH       LSE  Riemannian_SQP      dim\n","0  0.725699  0.018658  0.024474        0.058429   [4, 8]\n","0  0.709850  0.023766  0.032713        0.113307  [5, 10]\n","0  0.769271  0.030091  0.047857        0.192447  [6, 12]\n","0  0.792723  0.036078  0.056235        0.295798  [7, 14]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"QV3DnG2vSrUA"},"source":["## ResIter, ResTime Figures"]},{"cell_type":"code","metadata":{"id":"-6t7d92LQtHh","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1613222876888,"user_tz":-540,"elapsed":16430,"user":{"displayName":"Mitsuaki Obara","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgTc8J_ZbYtCo4EduXT-CtVU_yA3tGcM2yJdBrd=s64","userId":"01228617048231420770"}},"outputId":"34d61b8f-0511-4c7b-9e43-fa2531312a7a"},"source":["# make subtables (residual per slc iterations and time per slc iterations) \n","slc = -1\n","for maskratio in maskratio_set:\n","  for eqratio in eqratio_set:\n","    for rank in rank_set:\n","      for dim in dim_set:\n","        fig, axs = plt.subplots(dpi=600)\n","        time = pd.DataFrame()\n","        violation_sum = pd.DataFrame()\n","        rdim = dim[0]\n","        cdim = dim[1]\n","        for method in method_set:\n","          data = pd.read_csv(root_dir + input_dir + \"RC_nnlc_%s_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" %(method, rep, rdim, cdim, rank, tol, eqratio, maskratio))\n","\n","          try:\n","            coltime = data['time'].copy()\n","            coltime.name = method\n","            time = pd.concat([time, coltime], axis = 1)\n","          except:\n","            pass\n","\n","          try:\n","            colviosum = data['KKT_residual'].copy()\n","            colviosum.name = method\n","            violation_sum = pd.concat([violation_sum, colviosum], axis = 1)\n","          except:\n","            pass\n","\n","        # make a residual-iteration table\n","        subviolation_sum = violation_sum.iloc[:slc,:]\n","        subviolation_sum.rename(columns={'ALM' : 'RALM','LSE' : 'REPM(LSE)', 'LQH' : 'REPM(LQH)' , 'Riemannian_SQP': 'RSQO'}, inplace=True)\n","        print(subviolation_sum)\n","        subviolation_sum.to_csv(root_dir + output_dir + \"300sec_RC_nnlc_ResIter%dFigure_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" % (slc, rep, rdim, cdim, rank, tol, eqratio, maskratio))\n","\n","        # make a residual-iteration figure\n","        #plt.xticks(np.arange(subviolation_sum.shape[0]))\n","        #plt.xlim(0, subviolation_sum.shape[0]-1)\n","        #axs.grid(True)\n","        minlog10res = np.log10(subviolation_sum).min().min()\n","        maxlog10res = min(np.log10(subviolation_sum).max().max(), 3)\n","        minlog10res = math.floor(minlog10res) - 2\n","        maxlog10res = math.ceil(maxlog10res) + 1\n","        # xtime_array = np.arange(start = mintime, stop = maxtime, step = 0.1)\n","        #plt.xlim(0, maxtime)\n","        plt.ylim(minlog10res, maxlog10res)\n","        axs.plot(np.arange(subviolation_sum.shape[0]), np.log10(subviolation_sum), label = subviolation_sum.columns)\n","        axs.legend(subviolation_sum.columns, loc='upper right')\n","        #axs.hlines(-1 * tol, 0, max(time.max()), \"black\", linestyles='dashed') # hlines\n","        axs.set(xlabel = \"Iteration\")\n","        axs.set(ylabel = 'Residual (log10 scale)')\n","        plt.subplots_adjust(wspace=0.3, hspace=0.3)\n","        title = \"300sec_RC_nnlc_ResIter%dFigure_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e\" % (slc, rep, rdim, cdim, rank, tol, eqratio, maskratio)\n","        plt.savefig(root_dir + output_dir + title + \".pdf\")\n","        plt.close()\n","\n","        # make a time-iteration table\n","        subtime = time.iloc[:slc,:]\n","        subtime.rename(columns={'ALM' : 'RALM','LSE' : 'REPM(LSE)', 'LQH' : 'REPM(LQH)' ,'fmincon_SQP': 'fmincon SQO', 'Riemannian_SQP': 'RSQO'}, inplace=True)\n","        print(subtime)\n","        subtime.to_csv(root_dir + output_dir + \"300sec_RC_nnlc_ResIter%dFigure_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" % (slc, rep, rdim, cdim, rank, tol, eqratio, maskratio))\n","\n","        # reset figure\n","        restime_fig, restime_axs = plt.subplots(dpi=600)\n","\n","        # make a residual-time table for the first slc iterations\n","        mintime = subtime.min().min()  # take min() twice for the overall minimal time \n","        maxtime = subtime.max().max()\n","        mintime = math.floor(mintime)\n","        maxtime = math.ceil(maxtime) + 1\n","\n","        minlog10res = np.log10(subviolation_sum).min().min()\n","        maxlog10res = min(np.log10(subviolation_sum).max().max(), 3)\n","        minlog10res = math.floor(minlog10res) - 2\n","        maxlog10res = math.ceil(maxlog10res) + 1\n","        # xtime_array = np.arange(start = mintime, stop = maxtime, step = 0.1)\n","        #plt.xlim(0, maxtime)\n","        plt.ylim(minlog10res, maxlog10res)\n","        restime_axs.grid(True)\n","        for method in method_set:\n","          method_time = time[method].values\n","          method_residual = violation_sum[method].values\n","          restime_axs.plot(method_time, np.log10(method_residual))\n","        restime_axs.legend(subviolation_sum.columns, loc='upper right', fontsize = 'small')\n","        restime_axs.set(xlabel = \"Time\")\n","        restime_axs.set(ylabel = 'Residual (log10 scale)')\n","        plt.subplots_adjust(wspace=0.3, hspace=0.3)\n","        title = \"300sec_RC_nnlc_ResTime%dFigure_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e\" % (slc, rep, rdim, cdim, rank, tol, eqratio, maskratio)\n","        plt.savefig(root_dir + output_dir + title + \".pdf\")\n","        plt.close()"],"execution_count":5,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["           RALM  REPM(LQH)     REPM(LSE)      RSQO\n","0      3.799300   0.333160  4.168200e-01  5.155600\n","1      1.854100   0.018097  3.934900e-02  0.402800\n","2      0.541060   0.015904  2.152400e-02  0.044268\n","3      0.150980   0.013553  3.885800e-03  0.001480\n","4      0.054405   0.000036  5.921600e-04  0.001096\n","...         ...        ...           ...       ...\n","12219       NaN        NaN  1.865200e-07       NaN\n","12220       NaN        NaN  9.995700e-08       NaN\n","12221       NaN        NaN  4.010800e-07       NaN\n","12222       NaN        NaN  1.558400e-07       NaN\n","12223       NaN        NaN  2.395000e-07       NaN\n","\n","[12224 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["          RALM  REPM(LQH)  REPM(LSE)      RSQO\n","0      0.00000    0.00000    0.00000  0.000167\n","1      0.99794    0.13053    0.28608  0.348160\n","2      2.11200    0.22401    0.45654  0.433340\n","3      3.15810    0.35921    1.22970  0.500080\n","4      4.38260    1.54720    1.41540  0.569860\n","...        ...        ...        ...       ...\n","12219      NaN        NaN  294.29420       NaN\n","12220      NaN        NaN  294.31880       NaN\n","12221      NaN        NaN  294.34050       NaN\n","12222      NaN        NaN  294.36480       NaN\n","12223      NaN        NaN  294.38770       NaN\n","\n","[12224 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["         RALM  REPM(LQH)  REPM(LSE)          RSQO\n","0     4.38140    0.73191   1.012400  5.630900e+00\n","1     2.25320    0.12239   0.102500  6.351605e+09\n","2     0.65630    0.12070   0.087738  3.293791e+08\n","3     0.30361    0.12302   0.084570  1.186363e+09\n","4     0.18209    0.12972   0.085481  1.929683e+10\n","...       ...        ...        ...           ...\n","4096      NaN        NaN   0.126210           NaN\n","4097      NaN        NaN   0.126210           NaN\n","4098      NaN        NaN   0.126210           NaN\n","4099      NaN        NaN   0.126210           NaN\n","4100      NaN        NaN   0.126210           NaN\n","\n","[4101 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n","/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n","/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["        RALM  REPM(LQH)  REPM(LSE)      RSQO\n","0     0.0000    0.00000     0.0000  0.000199\n","1     1.0969    0.18664     1.8771  0.240210\n","2     1.7076    0.28866     3.4201  0.565200\n","3     2.8897    0.51549     4.9178  0.891870\n","4     4.1070    0.76245     6.4676  1.235800\n","...      ...        ...        ...       ...\n","4096     NaN        NaN   297.3207       NaN\n","4097     NaN        NaN   297.3523       NaN\n","4098     NaN        NaN   297.3809       NaN\n","4099     NaN        NaN   297.4134       NaN\n","4100     NaN        NaN   297.4463       NaN\n","\n","[4101 rows x 4 columns]\n","         RALM     REPM(LQH)  REPM(LSE)          RSQO\n","0     4.89400  3.019600e-07   0.583650  6.539300e+00\n","1     2.64360  3.019600e-07   0.091077  6.132000e-07\n","2     0.95269  3.361500e-07   0.051637  1.238300e-10\n","3     0.42946  3.907500e-07   0.029249  7.664300e-11\n","4     0.35152  4.769400e-07   0.016880  7.685300e-11\n","...       ...           ...        ...           ...\n","1601      NaN           NaN        NaN  7.664300e-11\n","1602      NaN           NaN        NaN  7.664300e-11\n","1603      NaN           NaN        NaN  7.664300e-11\n","1604      NaN           NaN        NaN  7.664300e-11\n","1605      NaN           NaN        NaN  7.664300e-11\n","\n","[1606 rows x 4 columns]\n","        RALM  REPM(LQH)  REPM(LSE)        RSQO\n","0     0.0000   0.000000    0.00000    0.000035\n","1     1.4153   0.010356    0.18219    0.197790\n","2     2.7310   0.019538    0.37823    0.381220\n","3     3.9767   0.028603    0.55910    0.565740\n","4     5.2518   0.037573    0.79534    0.751410\n","...      ...        ...        ...         ...\n","1601     NaN        NaN        NaN  299.161100\n","1602     NaN        NaN        NaN  299.347300\n","1603     NaN        NaN        NaN  299.549300\n","1604     NaN        NaN        NaN  299.733600\n","1605     NaN        NaN        NaN  299.913900\n","\n","[1606 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["         RALM     REPM(LQH)  REPM(LSE)          RSQO\n","0     5.99800  3.149800e+00   3.258600  7.931600e+00\n","1     3.08160  8.803800e-04   0.121950  4.751049e+09\n","2     1.04360  3.725600e-04   0.057395  1.110031e+10\n","3     0.32922  5.992200e-05   0.024760  1.674752e+10\n","4     0.12872  3.148600e-05   0.009899  1.713030e+10\n","...       ...           ...        ...           ...\n","6769      NaN  1.307300e-08        NaN           NaN\n","6770      NaN  1.143100e-08        NaN           NaN\n","6771      NaN  1.548000e-08        NaN           NaN\n","6772      NaN  1.278700e-08        NaN           NaN\n","6773      NaN  1.799600e-08        NaN           NaN\n","\n","[6774 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["         RALM  REPM(LQH)  REPM(LSE)      RSQO\n","0     0.00000    0.00000    0.00000  0.000033\n","1     0.24472    0.33521    0.41698  0.677010\n","2     0.53313    0.37231    0.58053  1.117700\n","3     0.70891    0.42868    0.74669  1.752300\n","4     0.85362    0.45936    0.94587  2.236700\n","...       ...        ...        ...       ...\n","6769      NaN  293.14780        NaN       NaN\n","6770      NaN  293.19130        NaN       NaN\n","6771      NaN  293.23480        NaN       NaN\n","6772      NaN  293.27850        NaN       NaN\n","6773      NaN  293.32200        NaN       NaN\n","\n","[6774 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["          RALM     REPM(LQH)  REPM(LSE)      RSQO\n","0      5.06460  1.158700e+00   2.258900  5.516900\n","1      1.59230  8.783200e-04   0.071706  0.357950\n","2      0.48989  2.873500e-04   0.038028  0.128230\n","3      0.24039  1.244200e-04   0.019956  0.035437\n","4      0.17510  3.433000e-05   0.009272  0.017346\n","...        ...           ...        ...       ...\n","14859      NaN  2.541100e-07        NaN       NaN\n","14860      NaN  4.326200e-07        NaN       NaN\n","14861      NaN  2.047900e-07        NaN       NaN\n","14862      NaN  5.810800e-07        NaN       NaN\n","14863      NaN  2.448900e-07        NaN       NaN\n","\n","[14864 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["          RALM  REPM(LQH)  REPM(LSE)      RSQO\n","0      0.00000    0.00000    0.00000  0.000042\n","1      0.72372    0.10393    0.19451  0.063798\n","2      1.76380    0.13135    0.33580  0.125510\n","3      2.70900    0.16315    0.50511  0.184090\n","4      3.63850    0.27444    0.69840  0.244420\n","...        ...        ...        ...       ...\n","14859      NaN  293.15210        NaN       NaN\n","14860      NaN  293.17150        NaN       NaN\n","14861      NaN  293.19200        NaN       NaN\n","14862      NaN  293.21140        NaN       NaN\n","14863      NaN  293.23190        NaN       NaN\n","\n","[14864 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["          RALM     REPM(LQH)  REPM(LSE)      RSQO\n","0      4.32900  1.427000e+00   1.649300  6.950500\n","1      1.90580  1.388700e-02   0.056114  0.985070\n","2      0.54185  2.410000e-02   0.027706  0.087373\n","3      0.23750  1.170000e-04   0.016582  0.056368\n","4      0.12462  4.089200e-05   0.012979  0.060688\n","...        ...           ...        ...       ...\n","11277      NaN  2.346100e-07        NaN       NaN\n","11278      NaN  2.044600e-07        NaN       NaN\n","11279      NaN  4.690700e-06        NaN       NaN\n","11280      NaN  1.181400e-06        NaN       NaN\n","11281      NaN  9.366400e-07        NaN       NaN\n","\n","[11282 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["         RALM  REPM(LQH)  REPM(LSE)      RSQO\n","0      0.0000     0.0000     0.0000  0.000121\n","1      1.0290     1.2647     1.6618  0.124090\n","2      2.3047     2.4282     3.1195  0.237900\n","3      3.4211     2.9855     4.7386  0.349510\n","4      4.4079     3.0006     5.5332  0.459640\n","...       ...        ...        ...       ...\n","11277     NaN   293.0375        NaN       NaN\n","11278     NaN   293.0636        NaN       NaN\n","11279     NaN   293.0830        NaN       NaN\n","11280     NaN   293.1111        NaN       NaN\n","11281     NaN   293.1379        NaN       NaN\n","\n","[11282 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["         RALM  REPM(LQH)  REPM(LSE)     RSQO\n","0     4.95100    1.40530    1.59260  7.87670\n","1     2.18780    0.11863    0.13579  1.19350\n","2     0.72053    0.11489    0.12546  0.62428\n","3     0.31169    0.11271    0.12231  0.44395\n","4     0.16202    0.11290    0.12259  0.40429\n","...       ...        ...        ...      ...\n","8023      NaN    0.14110        NaN      NaN\n","8024      NaN    0.14110        NaN      NaN\n","8025      NaN    0.14110        NaN      NaN\n","8026      NaN    0.14110        NaN      NaN\n","8027      NaN    0.14110        NaN      NaN\n","\n","[8028 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["        RALM  REPM(LQH)  REPM(LSE)      RSQO\n","0     0.0000    0.00000     0.0000  0.000031\n","1     1.4758    0.29514     1.9527  0.215010\n","2     2.7618    0.50533     3.7767  0.402830\n","3     4.0387    0.79758     5.6812  0.604650\n","4     5.1753    1.18840     7.6014  0.814950\n","...      ...        ...        ...       ...\n","8023     NaN  293.37660        NaN       NaN\n","8024     NaN  293.41040        NaN       NaN\n","8025     NaN  293.44150        NaN       NaN\n","8026     NaN  293.47550        NaN       NaN\n","8027     NaN  293.50690        NaN       NaN\n","\n","[8028 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["         RALM     REPM(LQH)  REPM(LSE)          RSQO\n","0     5.35180  1.121500e+00   1.945300  7.213500e+00\n","1     2.47480  8.266300e-04   0.122360  6.483343e+06\n","2     0.92251  2.219400e-04   0.061824  1.418923e+07\n","3     0.44811  9.631800e-05   0.029877  2.176520e+05\n","4     0.31258  3.384400e-05   0.012891  1.416455e+05\n","...       ...           ...        ...           ...\n","7226      NaN  6.437800e-07        NaN           NaN\n","7227      NaN  2.017000e-06        NaN           NaN\n","7228      NaN  6.924300e-07        NaN           NaN\n","7229      NaN  8.352100e-07        NaN           NaN\n","7230      NaN  1.029500e-06        NaN           NaN\n","\n","[7231 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["         RALM  REPM(LQH)  REPM(LSE)      RSQO\n","0     0.00000    0.00000    0.00000  0.000032\n","1     0.22876    0.13460    0.23326  0.663880\n","2     1.98670    0.17872    0.43454  1.048100\n","3     3.59570    0.20576    0.72423  1.638700\n","4     5.04280    0.25428    1.05330  2.306900\n","...       ...        ...        ...       ...\n","7226      NaN  292.56810        NaN       NaN\n","7227      NaN  292.60480        NaN       NaN\n","7228      NaN  292.64960        NaN       NaN\n","7229      NaN  292.69030        NaN       NaN\n","7230      NaN  292.73290        NaN       NaN\n","\n","[7231 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["           RALM  REPM(LQH)     REPM(LSE)      RSQO\n","0      3.225200   0.262570  4.819400e-01  5.663700\n","1      1.339500   0.000614  5.565000e-03  0.226920\n","2      0.319970   0.000360  6.631600e-04  0.147690\n","3      0.073838   0.000094  3.723300e-05  0.078519\n","4      0.017041   0.000041  4.804100e-05  0.122600\n","...         ...        ...           ...       ...\n","12168       NaN        NaN  1.065300e-06       NaN\n","12169       NaN        NaN  3.680400e-07       NaN\n","12170       NaN        NaN  6.308800e-07       NaN\n","12171       NaN        NaN  2.752500e-07       NaN\n","12172       NaN        NaN  6.122800e-07       NaN\n","\n","[12173 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["          RALM  REPM(LQH)  REPM(LSE)      RSQO\n","0      0.00000   0.000000     0.0000  0.000070\n","1      0.69957   0.099533     1.1253  0.080737\n","2      0.76377   0.109940     1.1825  0.154980\n","3      0.84113   0.131870     1.2165  0.229240\n","4      0.90188   0.176460     1.2377  0.305090\n","...        ...        ...        ...       ...\n","12168      NaN        NaN   294.3870       NaN\n","12169      NaN        NaN   294.4116       NaN\n","12170      NaN        NaN   294.4350       NaN\n","12171      NaN        NaN   294.4596       NaN\n","12172      NaN        NaN   294.4822       NaN\n","\n","[12173 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["           RALM     REPM(LQH)  REPM(LSE)      RSQO\n","0      4.510600  9.746000e-01   1.440200  6.469000\n","1      1.432300  9.240100e-04   0.061103  0.715980\n","2      0.503190  4.789000e-04   0.031590  0.151900\n","3      0.134250  2.685300e-04   0.017146  0.253500\n","4      0.042972  3.504700e-05   0.009386  0.085888\n","...         ...           ...        ...       ...\n","11433       NaN  9.228600e-07        NaN       NaN\n","11434       NaN  1.743300e-06        NaN       NaN\n","11435       NaN  8.222500e-07        NaN       NaN\n","11436       NaN  1.569400e-06        NaN       NaN\n","11437       NaN  7.221900e-07        NaN       NaN\n","\n","[11438 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["          RALM  REPM(LQH)  REPM(LSE)      RSQO\n","0      0.00000    0.00000     0.0000  0.000038\n","1      0.98152    0.60572     1.3824  0.127160\n","2      1.71000    0.62043     3.0556  0.254170\n","3      2.73620    0.63664     3.9931  0.374110\n","4      3.80700    0.78282     5.3753  0.492980\n","...        ...        ...        ...       ...\n","11433      NaN  292.81820        NaN       NaN\n","11434      NaN  292.84190        NaN       NaN\n","11435      NaN  292.86710        NaN       NaN\n","11436      NaN  292.89040        NaN       NaN\n","11437      NaN  292.91530        NaN       NaN\n","\n","[11438 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["          RALM     REPM(LQH)  REPM(LSE)     RSQO\n","0     5.553300  1.175200e+00   1.937400  7.21100\n","1     1.638800  9.851200e-04   0.050039  0.82901\n","2     0.688620  3.165200e-04   0.019823  0.27041\n","3     0.271910  1.366000e-04   0.008707  0.19026\n","4     0.096498  4.616000e-05   0.004108  0.10666\n","...        ...           ...        ...      ...\n","9650       NaN  3.787900e-07        NaN      NaN\n","9651       NaN  1.497600e-07        NaN      NaN\n","9652       NaN  2.437900e-07        NaN      NaN\n","9653       NaN  1.044700e-07        NaN      NaN\n","9654       NaN  5.302700e-07        NaN      NaN\n","\n","[9655 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["        RALM  REPM(LQH)  REPM(LSE)     RSQO\n","0     0.0000    0.00000     0.0000  0.00003\n","1     1.1604    0.38809     1.8574  0.20958\n","2     2.5505    0.46343     3.4516  0.41393\n","3     3.9772    0.52184     3.8488  0.61583\n","4     5.3834    0.67786     4.3352  0.80509\n","...      ...        ...        ...      ...\n","9650     NaN  292.37950        NaN      NaN\n","9651     NaN  292.41110        NaN      NaN\n","9652     NaN  292.44100        NaN      NaN\n","9653     NaN  292.47270        NaN      NaN\n","9654     NaN  292.50040        NaN      NaN\n","\n","[9655 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["         RALM  REPM(LQH)  REPM(LSE)          RSQO\n","0     5.68040   0.515010   1.354900  8.896800e+00\n","1     1.99240   0.029720   0.113480  3.274306e+07\n","2     0.79221   0.029760   0.075602  1.337541e+08\n","3     0.31574   0.029849   0.063840  1.052922e+06\n","4     0.19660   0.030058   0.059464  2.382613e+05\n","...       ...        ...        ...           ...\n","6988      NaN   0.038650        NaN           NaN\n","6989      NaN   0.038650        NaN           NaN\n","6990      NaN   0.038650        NaN           NaN\n","6991      NaN   0.038650        NaN           NaN\n","6992      NaN   0.038650        NaN           NaN\n","\n","[6993 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["        RALM  REPM(LQH)  REPM(LSE)      RSQO\n","0     0.0000    0.00000     0.0000  0.000032\n","1     1.6535    0.74891     2.0601  0.616160\n","2     3.2698    0.84856     4.3896  1.079600\n","3     4.7360    2.10310     6.7692  1.690600\n","4     6.2498    2.40310     9.1124  2.315000\n","...      ...        ...        ...       ...\n","6988     NaN  293.02290        NaN       NaN\n","6989     NaN  293.05580        NaN       NaN\n","6990     NaN  293.09520        NaN       NaN\n","6991     NaN  293.13060        NaN       NaN\n","6992     NaN  293.17000        NaN       NaN\n","\n","[6993 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["           RALM     REPM(LQH)  REPM(LSE)     RSQO\n","0      4.258200  8.565100e-01   1.492200  5.79660\n","1      1.123500  7.573100e-04   0.024177  0.64700\n","2      0.289220  3.176400e-04   0.007056  0.33181\n","3      0.087670  1.309300e-04   0.001502  0.16035\n","4      0.020225  3.822000e-05   0.000148  0.18341\n","...         ...           ...        ...      ...\n","15680       NaN  3.533900e-07        NaN      NaN\n","15681       NaN  2.587400e-07        NaN      NaN\n","15682       NaN  3.009700e-07        NaN      NaN\n","15683       NaN  2.517100e-07        NaN      NaN\n","15684       NaN  2.727900e-07        NaN      NaN\n","\n","[15685 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["          RALM   REPM(LQH)  REPM(LSE)      RSQO\n","0      0.00000    0.000000     0.0000  0.000044\n","1      0.68958    0.063318     1.1981  0.067994\n","2      1.53980    0.072443     2.4903  0.129930\n","3      1.64080    0.093946     2.6020  0.189350\n","4      1.74430    0.144560     2.7164  0.249870\n","...        ...         ...        ...       ...\n","15680      NaN  292.563400        NaN       NaN\n","15681      NaN  292.582300        NaN       NaN\n","15682      NaN  292.599600        NaN       NaN\n","15683      NaN  292.619100        NaN       NaN\n","15684      NaN  292.636300        NaN       NaN\n","\n","[15685 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["           RALM  REPM(LQH)  REPM(LSE)     RSQO\n","0      3.710800   0.947280   1.045900  6.80780\n","1      1.492600   0.008525   0.048606  0.56253\n","2      0.392050   0.005915   0.022284  0.18528\n","3      0.105420   0.004084   0.010213  0.11347\n","4      0.024321   0.002809   0.004654  0.10809\n","...         ...        ...        ...      ...\n","12310       NaN   0.000013        NaN      NaN\n","12311       NaN   0.000010        NaN      NaN\n","12312       NaN   0.000009        NaN      NaN\n","12313       NaN   0.000036        NaN      NaN\n","12314       NaN   0.000009        NaN      NaN\n","\n","[12315 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["          RALM  REPM(LQH)  REPM(LSE)      RSQO\n","0      0.00000    0.00000     0.0000  0.000031\n","1      0.79543    0.18201     1.3894  0.115950\n","2      2.06880    0.22911     2.0435  0.226630\n","3      2.16510    0.29808     2.8199  0.344370\n","4      2.23900    0.39174     3.5824  0.472910\n","...        ...        ...        ...       ...\n","12310      NaN  292.56740        NaN       NaN\n","12311      NaN  292.59230        NaN       NaN\n","12312      NaN  292.61560        NaN       NaN\n","12313      NaN  292.63710        NaN       NaN\n","12314      NaN  292.66230        NaN       NaN\n","\n","[12315 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["          RALM     REPM(LQH)  REPM(LSE)      RSQO\n","0     6.012000  1.478200e+00   1.974400  8.879600\n","1     1.544700  8.882100e-04   0.036257  0.621060\n","2     0.464140  3.602000e-04   0.011976  0.301210\n","3     0.117370  1.296600e-04   0.003592  0.209200\n","4     0.030251  8.105000e-05   0.000765  0.049225\n","...        ...           ...        ...       ...\n","9710       NaN  2.186000e-06        NaN       NaN\n","9711       NaN  3.443500e-07        NaN       NaN\n","9712       NaN  1.233100e-06        NaN       NaN\n","9713       NaN  3.510100e-07        NaN       NaN\n","9714       NaN  1.595000e-06        NaN       NaN\n","\n","[9715 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["        RALM  REPM(LQH)  REPM(LSE)      RSQO\n","0     0.0000    0.00000     0.0000  0.000038\n","1     1.0878    0.29649     1.3948  0.195780\n","2     2.4374    0.32836     2.0914  0.380660\n","3     2.7954    0.48009     3.0562  0.566140\n","4     2.9433    0.52175     4.1346  0.769030\n","...      ...        ...        ...       ...\n","9710     NaN  292.19350        NaN       NaN\n","9711     NaN  292.22430        NaN       NaN\n","9712     NaN  292.25060        NaN       NaN\n","9713     NaN  292.28090        NaN       NaN\n","9714     NaN  292.30750        NaN       NaN\n","\n","[9715 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["         RALM     REPM(LQH)  REPM(LSE)     RSQO\n","0     6.15820  6.399400e-01   1.850400  9.67750\n","1     1.81040  7.353800e-04   0.061409  0.50219\n","2     0.62418  2.977100e-04   0.023185  0.21977\n","3     0.18818  1.347000e-04   0.006602  0.13179\n","4     0.10272  4.834500e-05   0.000994  0.11452\n","...       ...           ...        ...      ...\n","8092      NaN  1.523400e-07        NaN      NaN\n","8093      NaN  9.440000e-07        NaN      NaN\n","8094      NaN  1.618200e-07        NaN      NaN\n","8095      NaN  6.446000e-07        NaN      NaN\n","8096      NaN  1.570200e-07        NaN      NaN\n","\n","[8097 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["        RALM  REPM(LQH)  REPM(LSE)      RSQO\n","0     0.0000    0.00000     0.0000  0.000033\n","1     1.3841    0.61688     2.3829  0.294650\n","2     2.8303    0.65173     4.7161  0.611910\n","3     4.2198    0.75828     7.0858  0.908280\n","4     5.6327    0.84106     8.7312  1.256300\n","...      ...        ...        ...       ...\n","8092     NaN  291.95140        NaN       NaN\n","8093     NaN  291.98270        NaN       NaN\n","8094     NaN  292.02000        NaN       NaN\n","8095     NaN  292.05240        NaN       NaN\n","8096     NaN  292.08940        NaN       NaN\n","\n","[8097 rows x 4 columns]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"FFi3lSohWqft"},"source":["end"]},{"cell_type":"code","metadata":{"id":"z0b7w7o4e34a"},"source":["# make subtables (residual per slc iterations and time per slc iterations) \n","slc = -1\n","for maskratio in maskratio_set:\n","  for eqratio in eqratio_set:\n","    for rank in rank_set:\n","      for dim in dim_set:\n","        fig, axs = plt.subplots(dpi=600)\n","        time = pd.DataFrame()\n","        violation_sum = pd.DataFrame()\n","        rdim = dim[0]\n","        cdim = dim[1]\n","        for method in method_set:\n","          data = pd.read_csv(root_dir + input_dir + \"RC_nnlc_%s_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" %(method, rep, rdim, cdim, rank, tol, eqratio, maskratio))\n","\n","          try:\n","            coltime = data['time'].copy()\n","            coltime.name = method\n","            time = pd.concat([time, coltime], axis = 1)\n","          except:\n","            pass\n","\n","          try:\n","            colviosum = data['KKT_residual'].copy()\n","            colviosum.name = method\n","            violation_sum = pd.concat([violation_sum, colviosum], axis = 1)\n","          except:\n","            pass\n","\n","        # make a residual-iteration table\n","        subviolation_sum = violation_sum.iloc[:slc,:]\n","        subviolation_sum.rename(columns={'ALM' : 'RALM','LSE' : 'REPM(LSE)', 'LQH' : 'REPM(LQH)' , 'Riemannian_SQP': 'RSQO'}, inplace=True)\n","        print(subviolation_sum)\n","        subviolation_sum.to_csv(root_dir + output_dir + \"grid_RC_nnlc_ResIter%dFigure_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" % (slc, rep, rdim, cdim, rank, tol, eqratio, maskratio))\n","\n","        # make a residual-iteration figure\n","        #plt.xticks(np.arange(subviolation_sum.shape[0]))\n","        #plt.xlim(0, subviolation_sum.shape[0]-1)\n","        #axs.grid(True)\n","        minlog10res = np.log10(subviolation_sum).min().min()\n","        maxlog10res = min(np.log10(subviolation_sum).max().max(), 3)\n","        minlog10res = math.floor(minlog10res) - 2\n","        maxlog10res = math.ceil(maxlog10res) + 1\n","        # xtime_array = np.arange(start = mintime, stop = maxtime, step = 0.1)\n","        #plt.xlim(0, maxtime)\n","        plt.ylim(minlog10res, maxlog10res)\n","        axs.plot(np.arange(subviolation_sum.shape[0]), np.log10(subviolation_sum), label = subviolation_sum.columns)\n","        axs.legend(subviolation_sum.columns, loc='upper right')\n","        #axs.hlines(-1 * tol, 0, max(time.max()), \"black\", linestyles='dashed') # hlines\n","        axs.set(xlabel = \"Iteration\")\n","        axs.set(ylabel = 'Residual (log10 scale)')\n","        plt.subplots_adjust(wspace=0.3, hspace=0.3)\n","        title = \"grid_RC_nnlc_ResIter%dFigure_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e\" % (slc, rep, rdim, cdim, rank, tol, eqratio, maskratio)\n","        plt.savefig(root_dir + output_dir + title + \".pdf\")\n","        plt.close()\n","\n","        # make a time-iteration table\n","        subtime = time.iloc[:slc,:]\n","        subtime.rename(columns={'ALM' : 'RALM','LSE' : 'REPM(LSE)', 'LQH' : 'REPM(LQH)' ,'fmincon_SQP': 'fmincon SQO', 'Riemannian_SQP': 'RSQO'}, inplace=True)\n","        print(subtime)\n","        subtime.to_csv(root_dir + output_dir + \"grid_RC_nnlc_ResIter%dFigure_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" % (slc, rep, rdim, cdim, rank, tol, eqratio, maskratio))\n","\n","        # reset figure\n","        restime_fig, restime_axs = plt.subplots(dpi=600)\n","\n","        # make a residual-time table for the first slc iterations\n","        mintime = subtime.min().min()  # take min() twice for the overall minimal time \n","        maxtime = subtime.max().max()\n","        mintime = math.floor(mintime)\n","        maxtime = math.ceil(maxtime) + 1\n","\n","        minlog10res = np.log10(subviolation_sum).min().min()\n","        maxlog10res = min(np.log10(subviolation_sum).max().max(), 3)\n","        minlog10res = math.floor(minlog10res) - 2\n","        maxlog10res = math.ceil(maxlog10res) + 1\n","        # xtime_array = np.arange(start = mintime, stop = maxtime, step = 0.1)\n","        #plt.xlim(0, maxtime)\n","        plt.ylim(minlog10res, maxlog10res)\n","        restime_axs.grid(True)\n","        for method in method_set:\n","          method_time = time[method].values\n","          method_residual = violation_sum[method].values\n","          restime_axs.plot(method_time, np.log10(method_residual))\n","        restime_axs.legend(subviolation_sum.columns, loc='upper right', fontsize = 'small')\n","        restime_axs.set(xlabel = \"Time\")\n","        restime_axs.set(ylabel = 'Residual (log10 scale)')\n","        plt.subplots_adjust(wspace=0.3, hspace=0.3)\n","        title = \"grid_RC_nnlc_ResTime%dFigure_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e\" % (slc, rep, rdim, cdim, rank, tol, eqratio, maskratio)\n","        plt.savefig(root_dir + output_dir + title + \".pdf\")\n","        plt.close()"],"execution_count":null,"outputs":[]}]}