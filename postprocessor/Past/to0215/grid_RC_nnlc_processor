{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"grid_RC_nnlc_processor","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"WOkcqUr1x7Gk"},"source":["**Postprocessor about KKT residual**"]},{"cell_type":"markdown","metadata":{"id":"lhtGDVuay1aC"},"source":["# Overall preliminaries"]},{"cell_type":"code","metadata":{"id":"J_v63uV-xx0H"},"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import math"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ibRpNxX4yBfs","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1612933408542,"user_tz":-540,"elapsed":881,"user":{"displayName":"Mitsuaki Obara","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgTc8J_ZbYtCo4EduXT-CtVU_yA3tGcM2yJdBrd=s64","userId":"01228617048231420770"}},"outputId":"5c370f7c-7dae-4e7b-bf49-89fafcc05fa6"},"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","root_dir=\"/content/drive/My Drive/Codes/Seqential-quadratic-programming-on-manifold/\"\n","output_dir = \"postprocessor/grid_RC_nnlc/\""],"execution_count":null,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"JCHXIkSlyFbH"},"source":["# grid_RC_nn processor\n"]},{"cell_type":"markdown","metadata":{"id":"wnqV7podytig"},"source":["## Preliminaries"]},{"cell_type":"code","metadata":{"id":"HWwmTO_8yErG"},"source":["rep = 1\n","dim_set = [[4,8], [5,10], [6,12], [7,14]]\n","rank_set = [2]\n","eqratio_set = [1, 0.7, 0.5, 0.3, 0]\n","maskratio_set = [0.1,0.3,0.5]\n","tol = 16\n","init_tolcheckpow = -3\n","method_set = ['ALM', 'LQH', 'LSE', 'Riemannian_SQP']\n","input_dir = \"result/grid_RC_nnlc/\""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"y5zj3ppxSl2X"},"source":["## ResItes, ResIter, AveTime Tables"]},{"cell_type":"code","metadata":{"id":"bNGsHgTsQAw2"},"source":["for maskratio in maskratio_set:\n","  for eqratio in eqratio_set:\n","    for rank in rank_set:\n","      ave_time_output = pd.DataFrame()\n","      for dim in dim_set:\n","        time_output = pd.DataFrame()\n","        iter_output = pd.DataFrame()\n","        ave_time_in_dim = pd.DataFrame()\n","        rdim = dim[0]\n","        cdim = dim[1]\n","\n","        for method in method_set:\n","          data = pd.read_csv(root_dir + input_dir + \"RC_nnlc_%s_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" %(method, rep, rdim, cdim, rank, tol, eqratio, maskratio))\n","          cols = data[['KKT_residual', 'time', 'iter']].copy()\n","          cols.name = method\n","          \n","          tolcheckpow = init_tolcheckpow\n","          time = []\n","          iter = []\n","\n","          ncol = cols.shape[0]\n","          while True:\n","            flag = False\n","            for i in range(ncol):\n","              if (data['KKT_residual'][i] < pow(10, -tolcheckpow)):\n","                time += [data['time'][i]]\n","                iter += [data['iter'][i]]\n","                tolcheckpow += 1\n","                flag = True\n","                break\n","            if not flag:\n","              break\n","\n","          time_outputcol = pd.Series(data = np.array(time), name = method)\n","          time_output = pd.concat([time_output, time_outputcol], axis = 1)\n","          iter_outputcol = pd.Series(data = np.array(iter), name = method)\n","          iter_output = pd.concat([iter_output, iter_outputcol], axis = 1)\n","\n","          total_time = data['time'][-1:].values[0]\n","          total_iter_num = data['time'][-1:].index[0]\n","          ave_time = total_time / total_iter_num\n","          #print(ave_time)\n","          ave_time_in_dim.insert(len(ave_time_in_dim.columns), method, [ave_time])\n","          #print(ave_time_in_dim)\n","\n","          # ave_time_output = pd.concat([ave_time_output, ave_time_outputcol], axis = 1)\n","        \n","        ave_time_in_dim[\"dim\"] = str(dim)\n","        ave_time_output = pd.concat([ave_time_output, ave_time_in_dim], axis = 0)\n","        time_fintotal_checkpow = time_output.shape[0] + init_tolcheckpow\n","        time_output[\"log10residual\"] = pd.RangeIndex(start = init_tolcheckpow, stop = time_fintotal_checkpow)\n","        iter_fintotal_checkpow = iter_output.shape[0] + init_tolcheckpow\n","        iter_output[\"log10residual\"] = pd.RangeIndex(start = init_tolcheckpow, stop = iter_fintotal_checkpow)\n","\n","        print(time_output)\n","        time_output.to_csv(root_dir + output_dir + \"grid_RC_nnlc_ResTimeTable_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" %(rep, rdim, cdim, rank, tol, eqratio, maskratio))\n","        print(iter_output)\n","        iter_output.to_csv(root_dir + output_dir + \"grid_RC_nnlc_ResIterTable_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" %(rep, rdim, cdim, rank, tol, eqratio, maskratio))\n","\n","      print(ave_time_output)\n","      ave_time_output.to_csv(root_dir + output_dir + \"grid_RC_nnlc_WholeAveTimeTable_nrep%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" %(rep, rank, tol, eqratio, maskratio))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QV3DnG2vSrUA"},"source":["## ResIter, ResTime Figures"]},{"cell_type":"code","metadata":{"id":"-6t7d92LQtHh"},"source":["# make subtables (residual per slc iterations and time per slc iterations) \n","slc = -1\n","for maskratio in maskratio_set:\n","  for eqratio in eqratio_set:\n","    for rank in rank_set:\n","      for dim in dim_set:\n","        fig, axs = plt.subplots(dpi=600)\n","        time = pd.DataFrame()\n","        violation_sum = pd.DataFrame()\n","        rdim = dim[0]\n","        cdim = dim[1]\n","        for method in method_set:\n","          data = pd.read_csv(root_dir + input_dir + \"RC_nnlc_%s_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" %(method, rep, rdim, cdim, rank, tol, eqratio, maskratio))\n","\n","          try:\n","            coltime = data['time'].copy()\n","            coltime.name = method\n","            time = pd.concat([time, coltime], axis = 1)\n","          except:\n","            pass\n","\n","          try:\n","            colviosum = data['KKT_residual'].copy()\n","            colviosum.name = method\n","            violation_sum = pd.concat([violation_sum, colviosum], axis = 1)\n","          except:\n","            pass\n","\n","        # make a residual-iteration table\n","        subviolation_sum = violation_sum.iloc[:slc,:]\n","        subviolation_sum.rename(columns={'ALM' : 'RALM','LSE' : 'REPM(LSE)', 'LQH' : 'REPM(LQH)' , 'Riemannian_SQP': 'RSQO'}, inplace=True)\n","        print(subviolation_sum)\n","        subviolation_sum.to_csv(root_dir + output_dir + \"grid_RC_nnlc_ResIter%dFigure_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" % (slc, rep, rdim, cdim, rank, tol, eqratio, maskratio))\n","\n","        # make a residual-iteration figure\n","        #plt.xticks(np.arange(subviolation_sum.shape[0]))\n","        #plt.xlim(0, subviolation_sum.shape[0]-1)\n","        #axs.grid(True)\n","        minlog10res = np.log10(subviolation_sum).min().min()\n","        maxlog10res = min(np.log10(subviolation_sum).max().max(), 3)\n","        minlog10res = math.floor(minlog10res) - 2\n","        maxlog10res = math.ceil(maxlog10res) + 1\n","        # xtime_array = np.arange(start = mintime, stop = maxtime, step = 0.1)\n","        #plt.xlim(0, maxtime)\n","        plt.ylim(minlog10res, maxlog10res)\n","        axs.plot(np.arange(subviolation_sum.shape[0]), np.log10(subviolation_sum), label = subviolation_sum.columns)\n","        axs.legend(subviolation_sum.columns, loc='upper right')\n","        #axs.hlines(-1 * tol, 0, max(time.max()), \"black\", linestyles='dashed') # hlines\n","        axs.set(xlabel = \"Iteration\")\n","        axs.set(ylabel = 'Residual (log10 scale)')\n","        plt.subplots_adjust(wspace=0.3, hspace=0.3)\n","        title = \"grid_RC_nnlc_ResIter%dFigure_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e\" % (slc, rep, rdim, cdim, rank, tol, eqratio, maskratio)\n","        plt.savefig(root_dir + output_dir + title + \".pdf\")\n","        plt.close()\n","\n","        # make a time-iteration table\n","        subtime = time.iloc[:slc,:]\n","        subtime.rename(columns={'ALM' : 'RALM','LSE' : 'REPM(LSE)', 'LQH' : 'REPM(LQH)' ,'fmincon_SQP': 'fmincon SQO', 'Riemannian_SQP': 'RSQO'}, inplace=True)\n","        print(subtime)\n","        subtime.to_csv(root_dir + output_dir + \"grid_RC_nnlc_ResIter%dFigure_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" % (slc, rep, rdim, cdim, rank, tol, eqratio, maskratio))\n","\n","        # reset figure\n","        restime_fig, restime_axs = plt.subplots(dpi=600)\n","\n","        # make a residual-time table for the first slc iterations\n","        mintime = subtime.min().min()  # take min() twice for the overall minimal time \n","        maxtime = subtime.max().max()\n","        mintime = math.floor(mintime)\n","        maxtime = math.ceil(maxtime) + 1\n","\n","        minlog10res = np.log10(subviolation_sum).min().min()\n","        maxlog10res = min(np.log10(subviolation_sum).max().max(), 3)\n","        minlog10res = math.floor(minlog10res) - 2\n","        maxlog10res = math.ceil(maxlog10res) + 1\n","        # xtime_array = np.arange(start = mintime, stop = maxtime, step = 0.1)\n","        #plt.xlim(0, maxtime)\n","        plt.ylim(minlog10res, maxlog10res)\n","        restime_axs.grid(True)\n","        for method in method_set:\n","          method_time = time[method].values\n","          method_residual = violation_sum[method].values\n","          restime_axs.plot(method_time, np.log10(method_residual))\n","        restime_axs.legend(subviolation_sum.columns, loc='upper right', fontsize = 'small')\n","        restime_axs.set(xlabel = \"Time\")\n","        restime_axs.set(ylabel = 'Residual (log10 scale)')\n","        plt.subplots_adjust(wspace=0.3, hspace=0.3)\n","        title = \"grid_RC_nnlc_ResTime%dFigure_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e\" % (slc, rep, rdim, cdim, rank, tol, eqratio, maskratio)\n","        plt.savefig(root_dir + output_dir + title + \".pdf\")\n","        plt.close()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FFi3lSohWqft"},"source":["end"]},{"cell_type":"code","metadata":{"id":"z0b7w7o4e34a"},"source":["# make subtables (residual per slc iterations and time per slc iterations) \n","slc = -1\n","for maskratio in maskratio_set:\n","  for eqratio in eqratio_set:\n","    for rank in rank_set:\n","      for dim in dim_set:\n","        fig, axs = plt.subplots(dpi=600)\n","        time = pd.DataFrame()\n","        violation_sum = pd.DataFrame()\n","        rdim = dim[0]\n","        cdim = dim[1]\n","        for method in method_set:\n","          data = pd.read_csv(root_dir + input_dir + \"RC_nnlc_%s_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" %(method, rep, rdim, cdim, rank, tol, eqratio, maskratio))\n","\n","          try:\n","            coltime = data['time'].copy()\n","            coltime.name = method\n","            time = pd.concat([time, coltime], axis = 1)\n","          except:\n","            pass\n","\n","          try:\n","            colviosum = data['KKT_residual'].copy()\n","            colviosum.name = method\n","            violation_sum = pd.concat([violation_sum, colviosum], axis = 1)\n","          except:\n","            pass\n","\n","        # make a residual-iteration table\n","        subviolation_sum = violation_sum.iloc[:slc,:]\n","        subviolation_sum.rename(columns={'ALM' : 'RALM','LSE' : 'REPM(LSE)', 'LQH' : 'REPM(LQH)' , 'Riemannian_SQP': 'RSQO'}, inplace=True)\n","        print(subviolation_sum)\n","        subviolation_sum.to_csv(root_dir + output_dir + \"grid_RC_nnlc_ResIter%dFigure_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" % (slc, rep, rdim, cdim, rank, tol, eqratio, maskratio))\n","\n","        # make a residual-iteration figure\n","        #plt.xticks(np.arange(subviolation_sum.shape[0]))\n","        #plt.xlim(0, subviolation_sum.shape[0]-1)\n","        #axs.grid(True)\n","        minlog10res = np.log10(subviolation_sum).min().min()\n","        maxlog10res = min(np.log10(subviolation_sum).max().max(), 3)\n","        minlog10res = math.floor(minlog10res) - 2\n","        maxlog10res = math.ceil(maxlog10res) + 1\n","        # xtime_array = np.arange(start = mintime, stop = maxtime, step = 0.1)\n","        #plt.xlim(0, maxtime)\n","        plt.ylim(minlog10res, maxlog10res)\n","        axs.plot(np.arange(subviolation_sum.shape[0]), np.log10(subviolation_sum), label = subviolation_sum.columns)\n","        axs.legend(subviolation_sum.columns, loc='upper right')\n","        #axs.hlines(-1 * tol, 0, max(time.max()), \"black\", linestyles='dashed') # hlines\n","        axs.set(xlabel = \"Iteration\")\n","        axs.set(ylabel = 'Residual (log10 scale)')\n","        plt.subplots_adjust(wspace=0.3, hspace=0.3)\n","        title = \"grid_RC_nnlc_ResIter%dFigure_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e\" % (slc, rep, rdim, cdim, rank, tol, eqratio, maskratio)\n","        plt.savefig(root_dir + output_dir + title + \".pdf\")\n","        plt.close()\n","\n","        # make a time-iteration table\n","        subtime = time.iloc[:slc,:]\n","        subtime.rename(columns={'ALM' : 'RALM','LSE' : 'REPM(LSE)', 'LQH' : 'REPM(LQH)' ,'fmincon_SQP': 'fmincon SQO', 'Riemannian_SQP': 'RSQO'}, inplace=True)\n","        print(subtime)\n","        subtime.to_csv(root_dir + output_dir + \"grid_RC_nnlc_ResIter%dFigure_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" % (slc, rep, rdim, cdim, rank, tol, eqratio, maskratio))\n","\n","        # reset figure\n","        restime_fig, restime_axs = plt.subplots(dpi=600)\n","\n","        # make a residual-time table for the first slc iterations\n","        mintime = subtime.min().min()  # take min() twice for the overall minimal time \n","        maxtime = subtime.max().max()\n","        mintime = math.floor(mintime)\n","        maxtime = math.ceil(maxtime) + 1\n","\n","        minlog10res = np.log10(subviolation_sum).min().min()\n","        maxlog10res = min(np.log10(subviolation_sum).max().max(), 3)\n","        minlog10res = math.floor(minlog10res) - 2\n","        maxlog10res = math.ceil(maxlog10res) + 1\n","        # xtime_array = np.arange(start = mintime, stop = maxtime, step = 0.1)\n","        #plt.xlim(0, maxtime)\n","        plt.ylim(minlog10res, maxlog10res)\n","        restime_axs.grid(True)\n","        for method in method_set:\n","          method_time = time[method].values\n","          method_residual = violation_sum[method].values\n","          restime_axs.plot(method_time, np.log10(method_residual))\n","        restime_axs.legend(subviolation_sum.columns, loc='upper right', fontsize = 'small')\n","        restime_axs.set(xlabel = \"Time\")\n","        restime_axs.set(ylabel = 'Residual (log10 scale)')\n","        plt.subplots_adjust(wspace=0.3, hspace=0.3)\n","        title = \"grid_RC_nnlc_ResTime%dFigure_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e\" % (slc, rep, rdim, cdim, rank, tol, eqratio, maskratio)\n","        plt.savefig(root_dir + output_dir + title + \".pdf\")\n","        plt.close()"],"execution_count":null,"outputs":[]}]}