{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"maskratio_7e-1_RC_nnlc_processor","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"WOkcqUr1x7Gk"},"source":["**Postprocessor about KKT residual**"]},{"cell_type":"markdown","metadata":{"id":"lhtGDVuay1aC"},"source":["# Overall preliminaries"]},{"cell_type":"code","metadata":{"id":"J_v63uV-xx0H","executionInfo":{"status":"ok","timestamp":1613222257794,"user_tz":-540,"elapsed":8211,"user":{"displayName":"Mitsuaki Obara","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgTc8J_ZbYtCo4EduXT-CtVU_yA3tGcM2yJdBrd=s64","userId":"01228617048231420770"}}},"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import math"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"ibRpNxX4yBfs","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1613222257792,"user_tz":-540,"elapsed":384522,"user":{"displayName":"Mitsuaki Obara","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgTc8J_ZbYtCo4EduXT-CtVU_yA3tGcM2yJdBrd=s64","userId":"01228617048231420770"}},"outputId":"6b610dff-0d4f-4e3e-a0c1-4e6036e3acaa"},"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","root_dir=\"/content/drive/My Drive/Codes/Seqential-quadratic-programming-on-manifold/\"\n","output_dir = \"postprocessor/maskratio_7e-1_RC_nnlc/\""],"execution_count":2,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.activity.readonly&response_type=code\n","\n","Enter your authorization code:\n","4/1AY0e-g7t091u8fWwi2ZoRh80tNg1Ixnu-K3PsiCgYrQ_0pFfoTIBJb8JI2g\n","Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"JCHXIkSlyFbH"},"source":["# maskratio_7e-1_RC_nn processor\n"]},{"cell_type":"markdown","metadata":{"id":"wnqV7podytig"},"source":["## Preliminaries"]},{"cell_type":"code","metadata":{"id":"HWwmTO_8yErG","executionInfo":{"status":"ok","timestamp":1613222279469,"user_tz":-540,"elapsed":713,"user":{"displayName":"Mitsuaki Obara","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgTc8J_ZbYtCo4EduXT-CtVU_yA3tGcM2yJdBrd=s64","userId":"01228617048231420770"}}},"source":["rep = 1\n","dim_set = [[4,8], [5,10], [6,12], [7,14]]\n","rank_set = [2]\n","eqratio_set = [1, 0.7, 0.5, 0.3, 0]\n","maskratio_set = [0.7]\n","tol = 16\n","init_tolcheckpow = -3\n","method_set = ['ALM', 'LQH', 'LSE', 'Riemannian_SQP']\n","input_dir = \"result/maskratio_7e-1_RC_nnlc/\""],"execution_count":5,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"y5zj3ppxSl2X"},"source":["## ResItes, ResIter, AveTime Tables"]},{"cell_type":"code","metadata":{"id":"bNGsHgTsQAw2"},"source":["for maskratio in maskratio_set:\n","  for eqratio in eqratio_set:\n","    for rank in rank_set:\n","      ave_time_output = pd.DataFrame()\n","      for dim in dim_set:\n","        time_output = pd.DataFrame()\n","        iter_output = pd.DataFrame()\n","        ave_time_in_dim = pd.DataFrame()\n","        rdim = dim[0]\n","        cdim = dim[1]\n","\n","        for method in method_set:\n","          data = pd.read_csv(root_dir + input_dir + \"RC_nnlc_%s_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" %(method, rep, rdim, cdim, rank, tol, eqratio, maskratio))\n","          cols = data[['KKT_residual', 'time', 'iter']].copy()\n","          cols.name = method\n","          \n","          tolcheckpow = init_tolcheckpow\n","          time = []\n","          iter = []\n","\n","          ncol = cols.shape[0]\n","          while True:\n","            flag = False\n","            for i in range(ncol):\n","              if (data['KKT_residual'][i] < pow(10, -tolcheckpow)):\n","                time += [data['time'][i]]\n","                iter += [data['iter'][i]]\n","                tolcheckpow += 1\n","                flag = True\n","                break\n","            if not flag:\n","              break\n","\n","          time_outputcol = pd.Series(data = np.array(time), name = method)\n","          time_output = pd.concat([time_output, time_outputcol], axis = 1)\n","          iter_outputcol = pd.Series(data = np.array(iter), name = method)\n","          iter_output = pd.concat([iter_output, iter_outputcol], axis = 1)\n","\n","          total_time = data['time'][-1:].values[0]\n","          total_iter_num = data['time'][-1:].index[0]\n","          ave_time = total_time / total_iter_num\n","          #print(ave_time)\n","          ave_time_in_dim.insert(len(ave_time_in_dim.columns), method, [ave_time])\n","          #print(ave_time_in_dim)\n","\n","          # ave_time_output = pd.concat([ave_time_output, ave_time_outputcol], axis = 1)\n","        \n","        ave_time_in_dim[\"dim\"] = str(dim)\n","        ave_time_output = pd.concat([ave_time_output, ave_time_in_dim], axis = 0)\n","        time_fintotal_checkpow = time_output.shape[0] + init_tolcheckpow\n","        time_output[\"log10residual\"] = pd.RangeIndex(start = init_tolcheckpow, stop = time_fintotal_checkpow)\n","        iter_fintotal_checkpow = iter_output.shape[0] + init_tolcheckpow\n","        iter_output[\"log10residual\"] = pd.RangeIndex(start = init_tolcheckpow, stop = iter_fintotal_checkpow)\n","\n","        print(time_output)\n","        time_output.to_csv(root_dir + output_dir + \"maskratio_7e-1_RC_nnlc_ResTimeTable_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" %(rep, rdim, cdim, rank, tol, eqratio, maskratio))\n","        print(iter_output)\n","        iter_output.to_csv(root_dir + output_dir + \"maskratio_7e-1_RC_nnlc_ResIterTable_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" %(rep, rdim, cdim, rank, tol, eqratio, maskratio))\n","\n","      print(ave_time_output)\n","      ave_time_output.to_csv(root_dir + output_dir + \"maskratio_7e-1_RC_nnlc_WholeAveTimeTable_nrep%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" %(rep, rank, tol, eqratio, maskratio))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QV3DnG2vSrUA"},"source":["## ResIter, ResTime Figures"]},{"cell_type":"code","metadata":{"id":"-6t7d92LQtHh","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1613222380391,"user_tz":-540,"elapsed":13566,"user":{"displayName":"Mitsuaki Obara","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgTc8J_ZbYtCo4EduXT-CtVU_yA3tGcM2yJdBrd=s64","userId":"01228617048231420770"}},"outputId":"3242d96a-44b2-4200-bfc1-762f53490ea0"},"source":["# make subtables (residual per slc iterations and time per slc iterations) \n","slc = -1\n","for maskratio in maskratio_set:\n","  for eqratio in eqratio_set:\n","    for rank in rank_set:\n","      for dim in dim_set:\n","        fig, axs = plt.subplots(dpi=600)\n","        time = pd.DataFrame()\n","        violation_sum = pd.DataFrame()\n","        rdim = dim[0]\n","        cdim = dim[1]\n","        for method in method_set:\n","          data = pd.read_csv(root_dir + input_dir + \"RC_nnlc_%s_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" %(method, rep, rdim, cdim, rank, tol, eqratio, maskratio))\n","\n","          try:\n","            coltime = data['time'].copy()\n","            coltime.name = method\n","            time = pd.concat([time, coltime], axis = 1)\n","          except:\n","            pass\n","\n","          try:\n","            colviosum = data['KKT_residual'].copy()\n","            colviosum.name = method\n","            violation_sum = pd.concat([violation_sum, colviosum], axis = 1)\n","          except:\n","            pass\n","\n","        # make a residual-iteration table\n","        subviolation_sum = violation_sum.iloc[:slc,:]\n","        subviolation_sum.rename(columns={'ALM' : 'RALM','LSE' : 'REPM(LSE)', 'LQH' : 'REPM(LQH)' , 'Riemannian_SQP': 'RSQO'}, inplace=True)\n","        print(subviolation_sum)\n","        subviolation_sum.to_csv(root_dir + output_dir + \"maskratio_7e-1_RC_nnlc_ResIter%dFigure_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" % (slc, rep, rdim, cdim, rank, tol, eqratio, maskratio))\n","\n","        # make a residual-iteration figure\n","        #plt.xticks(np.arange(subviolation_sum.shape[0]))\n","        #plt.xlim(0, subviolation_sum.shape[0]-1)\n","        #axs.grid(True)\n","        minlog10res = np.log10(subviolation_sum).min().min()\n","        maxlog10res = min(np.log10(subviolation_sum).max().max(), 3)\n","        minlog10res = math.floor(minlog10res) - 2\n","        maxlog10res = math.ceil(maxlog10res) + 1\n","        # xtime_array = np.arange(start = mintime, stop = maxtime, step = 0.1)\n","        #plt.xlim(0, maxtime)\n","        plt.ylim(minlog10res, maxlog10res)\n","        axs.plot(np.arange(subviolation_sum.shape[0]), np.log10(subviolation_sum), label = subviolation_sum.columns)\n","        axs.legend(subviolation_sum.columns, loc='upper right')\n","        #axs.hlines(-1 * tol, 0, max(time.max()), \"black\", linestyles='dashed') # hlines\n","        axs.set(xlabel = \"Iteration\")\n","        axs.set(ylabel = 'Residual (log10 scale)')\n","        plt.subplots_adjust(wspace=0.3, hspace=0.3)\n","        title = \"maskratio_7e-1_RC_nnlc_ResIter%dFigure_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e\" % (slc, rep, rdim, cdim, rank, tol, eqratio, maskratio)\n","        plt.savefig(root_dir + output_dir + title + \".pdf\")\n","        plt.close()\n","\n","        # make a time-iteration table\n","        subtime = time.iloc[:slc,:]\n","        subtime.rename(columns={'ALM' : 'RALM','LSE' : 'REPM(LSE)', 'LQH' : 'REPM(LQH)' ,'fmincon_SQP': 'fmincon SQO', 'Riemannian_SQP': 'RSQO'}, inplace=True)\n","        print(subtime)\n","        subtime.to_csv(root_dir + output_dir + \"maskratio_7e-1_RC_nnlc_ResIter%dFigure_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" % (slc, rep, rdim, cdim, rank, tol, eqratio, maskratio))\n","\n","        # reset figure\n","        restime_fig, restime_axs = plt.subplots(dpi=600)\n","\n","        # make a residual-time table for the first slc iterations\n","        mintime = subtime.min().min()  # take min() twice for the overall minimal time \n","        maxtime = subtime.max().max()\n","        mintime = math.floor(mintime)\n","        maxtime = math.ceil(maxtime) + 1\n","\n","        minlog10res = np.log10(subviolation_sum).min().min()\n","        maxlog10res = min(np.log10(subviolation_sum).max().max(), 3)\n","        minlog10res = math.floor(minlog10res) - 2\n","        maxlog10res = math.ceil(maxlog10res) + 1\n","        # xtime_array = np.arange(start = mintime, stop = maxtime, step = 0.1)\n","        #plt.xlim(0, maxtime)\n","        plt.ylim(minlog10res, maxlog10res)\n","        restime_axs.grid(True)\n","        for method in method_set:\n","          method_time = time[method].values\n","          method_residual = violation_sum[method].values\n","          restime_axs.plot(method_time, np.log10(method_residual))\n","        restime_axs.legend(subviolation_sum.columns, loc='upper right', fontsize = 'small')\n","        restime_axs.set(xlabel = \"Time\")\n","        restime_axs.set(ylabel = 'Residual (log10 scale)')\n","        plt.subplots_adjust(wspace=0.3, hspace=0.3)\n","        title = \"maskratio_7e-1_RC_nnlc_ResTime%dFigure_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e\" % (slc, rep, rdim, cdim, rank, tol, eqratio, maskratio)\n","        plt.savefig(root_dir + output_dir + title + \".pdf\")\n","        plt.close()"],"execution_count":7,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["         RALM     REPM(LQH)  REPM(LSE)          RSQO\n","0     4.29460  1.009000e-07   0.172730  4.725300e+00\n","1     2.27930  1.009000e-07   0.040945  4.164100e-08\n","2     0.59090  1.424100e-07   0.019313  2.869200e-10\n","3     0.32784  2.037600e-07   0.007175  2.867900e-10\n","4     0.14387  2.941300e-07   0.001768  2.380000e-11\n","...       ...           ...        ...           ...\n","3576      NaN  1.230500e-08        NaN           NaN\n","3577      NaN  7.747500e-09        NaN           NaN\n","3578      NaN  1.287700e-08        NaN           NaN\n","3579      NaN  8.325600e-09        NaN           NaN\n","3580      NaN  1.347700e-08        NaN           NaN\n","\n","[3581 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["         RALM  REPM(LQH)  REPM(LSE)      RSQO\n","0     0.00000   0.000000    0.00000  0.000101\n","1     0.76676   0.006011    0.17226  0.295600\n","2     1.55500   0.010266    0.20538  0.356150\n","3     2.39180   0.014729    0.23604  0.412190\n","4     2.81630   0.019367    0.27090  0.466480\n","...       ...        ...        ...       ...\n","3576      NaN  58.794500        NaN       NaN\n","3577      NaN  58.810700        NaN       NaN\n","3578      NaN  58.825800        NaN       NaN\n","3579      NaN  58.842200        NaN       NaN\n","3580      NaN  58.858700        NaN       NaN\n","\n","[3581 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["         RALM     REPM(LQH)  REPM(LSE)          RSQO\n","0     5.63490  1.550400e-07   0.397440  6.172500e+00\n","1     2.64810  1.550400e-07   0.076144  3.407600e-07\n","2     0.78869  2.165900e-07   0.040941  3.204600e-10\n","3     0.33629  3.082500e-07   0.020117  3.204600e-10\n","4     0.23045  4.437700e-07   0.010075  3.204600e-10\n","...       ...           ...        ...           ...\n","2518      NaN  2.073000e-08        NaN           NaN\n","2519      NaN  2.058300e-08        NaN           NaN\n","2520      NaN  2.069300e-08        NaN           NaN\n","2521      NaN  2.064600e-08        NaN           NaN\n","2522      NaN  2.061600e-08        NaN           NaN\n","\n","[2523 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["         RALM  REPM(LQH)  REPM(LSE)      RSQO\n","0     0.00000   0.000000   0.000000  0.000036\n","1     0.71925   0.005737   0.076081  0.098388\n","2     1.76110   0.011870   0.160440  0.177580\n","3     2.71120   0.016864   0.245640  0.258520\n","4     3.42880   0.022256   0.341760  0.329820\n","...       ...        ...        ...       ...\n","2518      NaN  58.947000        NaN       NaN\n","2519      NaN  58.968300        NaN       NaN\n","2520      NaN  59.000700        NaN       NaN\n","2521      NaN  59.021600        NaN       NaN\n","2522      NaN  59.042700        NaN       NaN\n","\n","[2523 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["        RALM     REPM(LQH)  REPM(LSE)          RSQO\n","0    6.29520  1.750400e-07   0.527550  6.986700e+00\n","1    3.27800  1.750400e-07   0.116700  1.684200e-06\n","2    0.90554  2.315600e-07   0.054914  2.446700e-10\n","3    0.27264  3.192800e-07   0.031900  1.713700e-11\n","4    0.16850  4.520000e-07   0.017556  2.433700e-11\n","..       ...           ...        ...           ...\n","480      NaN           NaN        NaN  2.238200e-10\n","481      NaN           NaN        NaN  2.237500e-10\n","482      NaN           NaN        NaN  2.236800e-10\n","483      NaN           NaN        NaN  2.236000e-10\n","484      NaN           NaN        NaN  2.235300e-10\n","\n","[485 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["       RALM  REPM(LQH)  REPM(LSE)       RSQO\n","0    0.0000   0.000000     0.0000   0.000086\n","1    1.0850   0.008573     1.2060   0.131650\n","2    2.4565   0.016123     2.2517   0.263670\n","3    2.5234   0.025179     2.4380   0.393840\n","4    3.6822   0.032465     2.6257   0.519070\n","..      ...        ...        ...        ...\n","480     NaN        NaN        NaN  59.419300\n","481     NaN        NaN        NaN  59.549500\n","482     NaN        NaN        NaN  59.679200\n","483     NaN        NaN        NaN  59.809500\n","484     NaN        NaN        NaN  59.932100\n","\n","[485 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["         RALM     REPM(LQH)  REPM(LSE)          RSQO\n","0     7.23470  1.666000e-07   0.377510  8.435200e+00\n","1     3.77620  1.666000e-07   0.087732  7.331100e-07\n","2     1.06210  2.313400e-07   0.045577  7.010000e-11\n","3     0.32659  3.281800e-07   0.022085  7.010000e-11\n","4     0.18733  4.716800e-07   0.009042  7.010000e-11\n","...       ...           ...        ...           ...\n","1671      NaN  1.271300e-08        NaN           NaN\n","1672      NaN  1.395600e-08        NaN           NaN\n","1673      NaN  6.365500e-09        NaN           NaN\n","1674      NaN  5.646900e-09        NaN           NaN\n","1675      NaN  1.658200e-08        NaN           NaN\n","\n","[1676 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["        RALM  REPM(LQH)  REPM(LSE)      RSQO\n","0     0.0000   0.000000    0.00000  0.000029\n","1     1.3835   0.010026    0.12526  0.194960\n","2     2.8772   0.019605    0.24462  0.404310\n","3     4.2245   0.028900    0.36419  0.620520\n","4     5.5401   0.038315    0.49264  0.843000\n","...      ...        ...        ...       ...\n","1671     NaN  58.760500        NaN       NaN\n","1672     NaN  58.803100        NaN       NaN\n","1673     NaN  58.843500        NaN       NaN\n","1674     NaN  58.881800        NaN       NaN\n","1675     NaN  58.920000        NaN       NaN\n","\n","[1676 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["         RALM  REPM(LQH)  REPM(LSE)         RSQO\n","0     3.69860   0.424020   0.695340       4.7637\n","1     2.07480   0.040544   0.079857       3.6196\n","2     0.49241   0.039198   0.052979     229.2346\n","3     0.17579   0.037710   0.037988    8548.4408\n","4     0.14845   0.036166   0.030991  303258.6330\n","...       ...        ...        ...          ...\n","2443      NaN        NaN   0.013488          NaN\n","2444      NaN        NaN   0.013488          NaN\n","2445      NaN        NaN   0.013488          NaN\n","2446      NaN        NaN   0.013488          NaN\n","2447      NaN        NaN   0.013488          NaN\n","\n","[2448 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["          RALM  REPM(LQH)  REPM(LSE)      RSQO\n","0     0.000000    0.00000    0.00000  0.000061\n","1     0.069474    0.19734    0.21543  0.070185\n","2     1.000200    0.29339    0.42947  0.138650\n","3     1.091900    0.42917    0.67449  0.209780\n","4     1.672400    0.57733    0.98829  0.273200\n","...        ...        ...        ...       ...\n","2443       NaN        NaN   59.05330       NaN\n","2444       NaN        NaN   59.07440       NaN\n","2445       NaN        NaN   59.09960       NaN\n","2446       NaN        NaN   59.12350       NaN\n","2447       NaN        NaN   59.14630       NaN\n","\n","[2448 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["          RALM     REPM(LQH)  REPM(LSE)      RSQO\n","0     4.429500  4.949800e-01   0.814240  6.322700\n","1     2.222100  8.927000e-04   0.063527  0.422980\n","2     0.732910  2.190600e-04   0.028665  0.085392\n","3     0.277420  4.162300e-05   0.010423  0.006296\n","4     0.075089  3.805200e-05   0.002646  0.000065\n","...        ...           ...        ...       ...\n","3237       NaN  2.093100e-07        NaN       NaN\n","3238       NaN  1.293500e-06        NaN       NaN\n","3239       NaN  2.323500e-07        NaN       NaN\n","3240       NaN  3.205400e-07        NaN       NaN\n","3241       NaN  2.045000e-07        NaN       NaN\n","\n","[3242 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["         RALM  REPM(LQH)  REPM(LSE)      RSQO\n","0     0.00000    0.00000    0.00000  0.000027\n","1     0.12487    0.17857    0.12618  0.077216\n","2     0.53482    0.22852    0.25200  0.144670\n","3     0.69370    0.25272    0.38554  0.216300\n","4     0.79887    0.26327    0.54140  0.293770\n","...       ...        ...        ...       ...\n","3237      NaN   58.73210        NaN       NaN\n","3238      NaN   58.74850        NaN       NaN\n","3239      NaN   58.76750        NaN       NaN\n","3240      NaN   58.78470        NaN       NaN\n","3241      NaN   58.80360        NaN       NaN\n","\n","[3242 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["         RALM  REPM(LQH)     REPM(LSE)          RSQO\n","0     5.10730   0.147080  7.969400e-01  5.908000e+00\n","1     2.84480   0.000981  1.315500e-01  1.871500e-01\n","2     0.86006   0.000279  7.342100e-02  6.392800e-02\n","3     0.44291   0.000108  3.842100e-02  6.383000e-05\n","4     0.15192   0.000041  1.876100e-02  2.762600e-10\n","...       ...        ...           ...           ...\n","1888      NaN        NaN  9.274000e-08           NaN\n","1889      NaN        NaN  1.078800e-07           NaN\n","1890      NaN        NaN  8.133500e-08           NaN\n","1891      NaN        NaN  1.583900e-07           NaN\n","1892      NaN        NaN  1.107900e-07           NaN\n","\n","[1893 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["         RALM  REPM(LQH)  REPM(LSE)      RSQO\n","0     0.00000   0.000000    0.00000  0.000114\n","1     0.19415   0.084082    0.10151  0.121630\n","2     0.38218   0.101510    0.25295  0.245380\n","3     0.56335   0.137160    0.44443  0.365500\n","4     0.67902   0.171890    0.66263  0.487160\n","...       ...        ...        ...       ...\n","1888      NaN        NaN   58.94950       NaN\n","1889      NaN        NaN   58.97960       NaN\n","1890      NaN        NaN   59.00910       NaN\n","1891      NaN        NaN   59.03680       NaN\n","1892      NaN        NaN   59.06710       NaN\n","\n","[1893 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["         RALM     REPM(LQH)  REPM(LSE)          RSQO\n","0     5.62020  2.238300e-01   0.727360  7.309400e+00\n","1     3.03360  5.383300e-04   0.134240  2.075500e-01\n","2     1.05550  3.678300e-04   0.072900  3.277100e-03\n","3     0.49782  9.926600e-05   0.038149  9.435500e-09\n","4     0.16102  4.479100e-05   0.018049  7.307000e-09\n","...       ...           ...        ...           ...\n","1983      NaN  1.246300e-07        NaN           NaN\n","1984      NaN  2.412700e-07        NaN           NaN\n","1985      NaN  1.123500e-07        NaN           NaN\n","1986      NaN  4.507600e-07        NaN           NaN\n","1987      NaN  1.252900e-07        NaN           NaN\n","\n","[1988 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["         RALM  REPM(LQH)  REPM(LSE)     RSQO\n","0     0.00000   0.000000    0.00000  0.00003\n","1     0.16039   0.088537    0.13477  0.19788\n","2     0.43446   0.111060    0.28852  0.39271\n","3     0.56988   0.160760    0.46541  0.58535\n","4     0.67032   0.197610    0.69352  0.80220\n","...       ...        ...        ...      ...\n","1983      NaN  58.706700        NaN      NaN\n","1984      NaN  58.735400        NaN      NaN\n","1985      NaN  58.767200        NaN      NaN\n","1986      NaN  58.793800        NaN      NaN\n","1987      NaN  58.825600        NaN      NaN\n","\n","[1988 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["          RALM     REPM(LQH)  REPM(LSE)      RSQO\n","0     3.549600  8.090100e-01   0.848460  5.344800\n","1     1.632300  5.327200e-04   0.060256  0.406200\n","2     0.453430  3.620800e-04   0.031856  0.326390\n","3     0.164150  1.120200e-04   0.014360  0.083751\n","4     0.080525  3.786000e-05   0.006266  0.079189\n","...        ...           ...        ...       ...\n","3797       NaN  2.302000e-07        NaN       NaN\n","3798       NaN  2.673300e-07        NaN       NaN\n","3799       NaN  3.443300e-07        NaN       NaN\n","3800       NaN  2.243800e-07        NaN       NaN\n","3801       NaN  2.011800e-06        NaN       NaN\n","\n","[3802 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["         RALM  REPM(LQH)  REPM(LSE)      RSQO\n","0     0.00000   0.000000    0.00000  0.000039\n","1     0.61783   0.090824    0.15169  0.051988\n","2     0.68374   0.099201    1.12300  0.099087\n","3     0.73823   0.124650    1.23410  0.141140\n","4     0.79502   0.146950    2.20620  0.181650\n","...       ...        ...        ...       ...\n","3797      NaN  58.660100        NaN       NaN\n","3798      NaN  58.672900        NaN       NaN\n","3799      NaN  58.688200        NaN       NaN\n","3800      NaN  58.705100        NaN       NaN\n","3801      NaN  58.718500        NaN       NaN\n","\n","[3802 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["          RALM  REPM(LQH)  REPM(LSE)     RSQO\n","0     3.950300   0.902090   0.908780  6.54090\n","1     1.947100   0.024301   0.078012  0.87980\n","2     0.634670   0.017870   0.058122  0.37629\n","3     0.170260   0.012932   0.046153  0.45385\n","4     0.056578   0.009246   0.038016  0.33985\n","...        ...        ...        ...      ...\n","3008       NaN   0.000009        NaN      NaN\n","3009       NaN   0.000012        NaN      NaN\n","3010       NaN   0.000010        NaN      NaN\n","3011       NaN   0.000009        NaN      NaN\n","3012       NaN   0.000033        NaN      NaN\n","\n","[3013 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["          RALM  REPM(LQH)  REPM(LSE)      RSQO\n","0     0.000000    0.00000     0.0000  0.000026\n","1     0.052974    0.16268     1.1549  0.083037\n","2     0.154730    0.22053     1.5144  0.156450\n","3     0.286570    0.29582     1.7378  0.236700\n","4     0.389280    0.40874     2.9100  0.314190\n","...        ...        ...        ...       ...\n","3008       NaN   58.80220        NaN       NaN\n","3009       NaN   58.81890        NaN       NaN\n","3010       NaN   58.83670        NaN       NaN\n","3011       NaN   58.85360        NaN       NaN\n","3012       NaN   58.86900        NaN       NaN\n","\n","[3013 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["         RALM     REPM(LQH)  REPM(LSE)          RSQO\n","0     5.02580  1.457200e+00   1.797800  7.190100e+00\n","1     2.11860  8.027800e-02   0.110500  4.399165e+07\n","2     0.77217  7.638300e-02   0.058819  1.424101e+08\n","3     0.26473  1.415700e-01   0.033287  4.450931e+06\n","4     0.10588  1.597700e-05   0.018696  3.789622e+09\n","...       ...           ...        ...           ...\n","2517      NaN  2.459100e-07        NaN           NaN\n","2518      NaN  2.227700e-07        NaN           NaN\n","2519      NaN  7.830000e-07        NaN           NaN\n","2520      NaN  2.388400e-07        NaN           NaN\n","2521      NaN  3.763800e-07        NaN           NaN\n","\n","[2522 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["        RALM  REPM(LQH)  REPM(LSE)      RSQO\n","0     0.0000    0.00000    0.00000  0.000027\n","1     1.0394    0.23856    0.24781  0.215270\n","2     1.9841    0.38795    0.41786  0.500040\n","3     2.9234    1.73350    0.63229  0.743200\n","4     3.8402    1.97720    0.90811  0.984900\n","...      ...        ...        ...       ...\n","2517     NaN   58.65220        NaN       NaN\n","2518     NaN   58.67770        NaN       NaN\n","2519     NaN   58.69740        NaN       NaN\n","2520     NaN   58.72170        NaN       NaN\n","2521     NaN   58.74490        NaN       NaN\n","\n","[2522 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["         RALM     REPM(LQH)  REPM(LSE)     RSQO\n","0     3.88160  8.252500e-01   1.171400   7.0329\n","1     2.21220  1.103800e-03   0.124560   1.4554\n","2     0.81882  3.645300e-04   0.061356  10.4310\n","3     0.43636  1.040600e-04   0.028513  21.5160\n","4     0.30317  4.648100e-05   0.014440  33.3184\n","...       ...           ...        ...      ...\n","1999      NaN  4.970200e-07        NaN      NaN\n","2000      NaN  5.237900e-07        NaN      NaN\n","2001      NaN  4.719700e-07        NaN      NaN\n","2002      NaN  6.767700e-07        NaN      NaN\n","2003      NaN  4.542400e-07        NaN      NaN\n","\n","[2004 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["        RALM  REPM(LQH)  REPM(LSE)      RSQO\n","0     0.0000    0.00000    0.00000  0.000029\n","1     1.3578    0.28614    0.30407  0.249850\n","2     2.6966    0.37348    0.62254  0.504280\n","3     3.6883    0.40756    0.98401  0.803320\n","4     4.9611    0.47123    1.43380  1.105400\n","...      ...        ...        ...       ...\n","1999     NaN   58.62220        NaN       NaN\n","2000     NaN   58.65160        NaN       NaN\n","2001     NaN   58.68150        NaN       NaN\n","2002     NaN   58.70730        NaN       NaN\n","2003     NaN   58.73420        NaN       NaN\n","\n","[2004 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["          RALM  REPM(LQH)  REPM(LSE)          RSQO\n","0     5.570100   1.807600   2.426900  6.977200e+00\n","1     1.347500   0.003649   0.035544  1.046000e+00\n","2     0.369150   0.002553   0.012526  3.196700e-01\n","3     0.099661   0.001772   0.004333  2.549300e-01\n","4     0.028131   0.001226   0.002229  3.043300e-02\n","...        ...        ...        ...           ...\n","1536       NaN        NaN        NaN  2.233400e-10\n","1537       NaN        NaN        NaN  2.232000e-10\n","1538       NaN        NaN        NaN  2.230600e-10\n","1539       NaN        NaN        NaN  2.229100e-10\n","1540       NaN        NaN        NaN  2.227700e-10\n","\n","[1541 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["         RALM  REPM(LQH)  REPM(LSE)       RSQO\n","0     0.00000    0.00000    0.00000   0.000039\n","1     0.17941    0.16536    0.95438   0.043015\n","2     0.93653    0.17400    1.09870   0.080788\n","3     1.71540    0.19313    1.39400   0.118030\n","4     2.48590    0.23563    1.74790   0.155430\n","...       ...        ...        ...        ...\n","1536      NaN        NaN        NaN  59.809000\n","1537      NaN        NaN        NaN  59.846400\n","1538      NaN        NaN        NaN  59.883700\n","1539      NaN        NaN        NaN  59.921100\n","1540      NaN        NaN        NaN  59.959700\n","\n","[1541 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["         RALM     REPM(LQH)  REPM(LSE)     RSQO\n","0     5.93290  1.955800e+00   2.785400  7.61450\n","1     1.51130  7.248400e-04   0.028231  1.51670\n","2     0.49667  3.364500e-04   0.007399  0.76310\n","3     0.16000  1.187100e-04   0.001095  0.38385\n","4     0.05536  4.261000e-05   0.000080  0.34695\n","...       ...           ...        ...      ...\n","3513      NaN  1.941900e-07        NaN      NaN\n","3514      NaN  3.110000e-07        NaN      NaN\n","3515      NaN  2.251500e-07        NaN      NaN\n","3516      NaN  1.898100e-07        NaN      NaN\n","3517      NaN  6.196000e-07        NaN      NaN\n","\n","[3518 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["          RALM  REPM(LQH)  REPM(LSE)      RSQO\n","0     0.000000    0.00000    0.00000  0.000028\n","1     0.085389    0.26851    0.15421  0.081167\n","2     0.167940    0.28375    0.26862  0.158430\n","3     0.269770    0.29631    0.40618  0.234850\n","4     0.343350    0.32038    0.52332  0.318170\n","...        ...        ...        ...       ...\n","3513       NaN   58.59430        NaN       NaN\n","3514       NaN   58.60960        NaN       NaN\n","3515       NaN   58.62660        NaN       NaN\n","3516       NaN   58.64350        NaN       NaN\n","3517       NaN   58.65740        NaN       NaN\n","\n","[3518 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["          RALM     REPM(LQH)  REPM(LSE)     RSQO\n","0     5.673800  1.458100e+00   1.912100  8.56670\n","1     1.845400  4.470500e-04   0.066250  0.90203\n","2     0.623210  3.219800e-04   0.027321  0.50143\n","3     0.201130  1.119200e-04   0.011927  0.14398\n","4     0.074378  4.525900e-05   0.005808  0.14542\n","...        ...           ...        ...      ...\n","2624       NaN  3.644900e-07        NaN      NaN\n","2625       NaN  3.274800e-07        NaN      NaN\n","2626       NaN  2.630300e-06        NaN      NaN\n","2627       NaN  1.008900e-06        NaN      NaN\n","2628       NaN  1.911600e-06        NaN      NaN\n","\n","[2629 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["         RALM  REPM(LQH)  REPM(LSE)      RSQO\n","0     0.00000    0.00000    0.00000  0.000029\n","1     0.12065    0.18541    0.24259  0.134830\n","2     0.27527    0.20091    0.37866  0.291370\n","3     0.37335    0.23081    0.60958  0.466700\n","4     0.46390    0.27180    0.88594  0.634340\n","...       ...        ...        ...       ...\n","2624      NaN   58.54840        NaN       NaN\n","2625      NaN   58.56910        NaN       NaN\n","2626      NaN   58.58580        NaN       NaN\n","2627      NaN   58.61670        NaN       NaN\n","2628      NaN   58.64240        NaN       NaN\n","\n","[2629 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["         RALM     REPM(LQH)  REPM(LSE)     RSQO\n","0     6.06990  2.384200e+00   2.829800  9.61400\n","1     2.00450  8.469600e-04   0.133900  1.45920\n","2     0.74912  2.454500e-04   0.088737  0.84261\n","3     0.40092  7.066900e-05   0.051711  0.78372\n","4     0.13314  3.482900e-05   0.028741  0.25592\n","...       ...           ...        ...      ...\n","2159      NaN  1.585500e-07        NaN      NaN\n","2160      NaN  1.770500e-06        NaN      NaN\n","2161      NaN  2.991200e-07        NaN      NaN\n","2162      NaN  4.328400e-07        NaN      NaN\n","2163      NaN  1.598000e-07        NaN      NaN\n","\n","[2164 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["         RALM  REPM(LQH)  REPM(LSE)     RSQO\n","0     0.00000    0.00000    0.00000  0.00003\n","1     0.18388    0.15438    0.31216  0.20663\n","2     0.55734    0.18300    0.59536  0.42445\n","3     1.68920    0.21631    0.82238  0.63747\n","4     2.16180    0.25117    1.19720  0.85419\n","...       ...        ...        ...      ...\n","2159      NaN   58.52570        NaN      NaN\n","2160      NaN   58.54550        NaN      NaN\n","2161      NaN   58.57140        NaN      NaN\n","2162      NaN   58.59580        NaN      NaN\n","2163      NaN   58.62190        NaN      NaN\n","\n","[2164 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["          RALM  REPM(LQH)  REPM(LSE)          RSQO\n","0     5.094700   1.736700   2.438600  7.088000e+00\n","1     0.815500   0.001218   0.037368  9.904200e-01\n","2     0.007114   0.001489   0.016459  3.589200e-01\n","3     0.003719   0.000246   0.008146  2.487900e-02\n","4     0.000005   0.000413   0.004075  1.333600e-03\n","...        ...        ...        ...           ...\n","1533       NaN        NaN        NaN  5.972000e-09\n","1534       NaN        NaN        NaN  5.972000e-09\n","1535       NaN        NaN        NaN  5.972000e-09\n","1536       NaN        NaN        NaN  5.972000e-09\n","1537       NaN        NaN        NaN  5.972000e-09\n","\n","[1538 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["         RALM  REPM(LQH)  REPM(LSE)       RSQO\n","0     0.00000    0.00000    0.00000   0.000140\n","1     0.76467    0.44433    0.14490   0.067127\n","2     1.34450    0.85362    0.21564   0.116160\n","3     1.77430    1.23070    0.28976   0.163090\n","4     2.01820    1.61800    0.36688   0.207320\n","...       ...        ...        ...        ...\n","1533      NaN        NaN        NaN  59.807100\n","1534      NaN        NaN        NaN  59.845300\n","1535      NaN        NaN        NaN  59.883500\n","1536      NaN        NaN        NaN  59.923100\n","1537      NaN        NaN        NaN  59.961700\n","\n","[1538 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["         RALM  REPM(LQH)  REPM(LSE)          RSQO\n","0    5.848700   2.464000   3.142100  8.217700e+00\n","1    1.140600   0.000631   0.068592  3.990200e+00\n","2    0.012458   0.000452   0.033111  1.351900e+00\n","3    0.000188   0.000072   0.013880  3.657300e-01\n","4    0.000043   0.000067   0.005623  3.034500e-01\n","..        ...        ...        ...           ...\n","786       NaN        NaN        NaN  4.648900e-10\n","787       NaN        NaN        NaN  4.637200e-10\n","788       NaN        NaN        NaN  4.625600e-10\n","789       NaN        NaN        NaN  4.614100e-10\n","790       NaN        NaN        NaN  4.602600e-10\n","\n","[791 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["        RALM  REPM(LQH)  REPM(LSE)       RSQO\n","0    0.00000    0.00000    0.00000   0.000027\n","1    0.79757    0.07514    0.97274   0.082878\n","2    1.44240    0.62730    1.26840   0.156130\n","3    1.54740    0.66227    1.41900   0.248370\n","4    1.55410    1.26960    1.56270   0.332660\n","..       ...        ...        ...        ...\n","786      NaN        NaN        NaN  59.608900\n","787      NaN        NaN        NaN  59.689800\n","788      NaN        NaN        NaN  59.768000\n","789      NaN        NaN        NaN  59.842500\n","790      NaN        NaN        NaN  59.916800\n","\n","[791 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n","/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["         RALM  REPM(LQH)  REPM(LSE)          RSQO\n","0    8.071800   1.856100   3.269000  9.625100e+00\n","1    1.575000   0.003207   0.123220  2.630500e+00\n","2    0.045444   0.001601   0.065703  6.549400e-01\n","3    0.009905   0.000607   0.034479  3.014500e-01\n","4    0.004076   0.000559   0.018176  1.797600e-01\n","..        ...        ...        ...           ...\n","450       NaN        NaN        NaN  4.449900e-07\n","451       NaN        NaN        NaN  4.444600e-07\n","452       NaN        NaN        NaN  4.439400e-07\n","453       NaN        NaN        NaN  4.434100e-07\n","454       NaN        NaN        NaN  4.428900e-07\n","\n","[455 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n","/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["       RALM  REPM(LQH)  REPM(LSE)       RSQO\n","0    0.0000    0.00000     0.0000   0.000027\n","1    1.4137    0.52056     1.1529   0.131950\n","2    2.0004    0.99559     2.4279   0.270880\n","3    2.1340    1.46140     3.6456   0.400270\n","4    2.2624    1.83660     4.9632   0.540250\n","..      ...        ...        ...        ...\n","450     NaN        NaN        NaN  59.434800\n","451     NaN        NaN        NaN  59.555600\n","452     NaN        NaN        NaN  59.684500\n","453     NaN        NaN        NaN  59.815800\n","454     NaN        NaN        NaN  59.950000\n","\n","[455 rows x 4 columns]\n","          RALM  REPM(LQH)  REPM(LSE)          RSQO\n","0    10.779300   3.168300   5.528000  1.249330e+01\n","1     1.479900   0.000650   0.085276  6.423300e+00\n","2     0.009335   0.000293   0.041108  1.843900e+00\n","3     0.000045   0.000106   0.018227  6.690500e-01\n","4     0.000045   0.000015   0.006965  8.730900e-02\n","..         ...        ...        ...           ...\n","279        NaN        NaN        NaN  7.859300e-10\n","280        NaN        NaN        NaN  7.859300e-10\n","281        NaN        NaN        NaN  7.859300e-10\n","282        NaN        NaN        NaN  7.859300e-10\n","283        NaN        NaN        NaN  7.859300e-10\n","\n","[284 rows x 4 columns]\n","       RALM  REPM(LQH)  REPM(LSE)       RSQO\n","0    0.0000   0.000000     0.0000   0.000029\n","1    1.2376   0.044602     1.0518   0.207930\n","2    2.1684   0.052956     1.1701   0.436760\n","3    2.2772   0.067415     1.3317   0.685700\n","4    2.2824   0.081527     2.2439   0.903800\n","..      ...        ...        ...        ...\n","279     NaN        NaN        NaN  58.998000\n","280     NaN        NaN        NaN  59.217000\n","281     NaN        NaN        NaN  59.426300\n","282     NaN        NaN        NaN  59.632800\n","283     NaN        NaN        NaN  59.840000\n","\n","[284 rows x 4 columns]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"FFi3lSohWqft"},"source":["end"]},{"cell_type":"code","metadata":{"id":"z0b7w7o4e34a"},"source":["# make subtables (residual per slc iterations and time per slc iterations) \n","slc = -1\n","for maskratio in maskratio_set:\n","  for eqratio in eqratio_set:\n","    for rank in rank_set:\n","      for dim in dim_set:\n","        fig, axs = plt.subplots(dpi=600)\n","        time = pd.DataFrame()\n","        violation_sum = pd.DataFrame()\n","        rdim = dim[0]\n","        cdim = dim[1]\n","        for method in method_set:\n","          data = pd.read_csv(root_dir + input_dir + \"RC_nnlc_%s_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" %(method, rep, rdim, cdim, rank, tol, eqratio, maskratio))\n","\n","          try:\n","            coltime = data['time'].copy()\n","            coltime.name = method\n","            time = pd.concat([time, coltime], axis = 1)\n","          except:\n","            pass\n","\n","          try:\n","            colviosum = data['KKT_residual'].copy()\n","            colviosum.name = method\n","            violation_sum = pd.concat([violation_sum, colviosum], axis = 1)\n","          except:\n","            pass\n","\n","        # make a residual-iteration table\n","        subviolation_sum = violation_sum.iloc[:slc,:]\n","        subviolation_sum.rename(columns={'ALM' : 'RALM','LSE' : 'REPM(LSE)', 'LQH' : 'REPM(LQH)' , 'Riemannian_SQP': 'RSQO'}, inplace=True)\n","        print(subviolation_sum)\n","        subviolation_sum.to_csv(root_dir + output_dir + \"grid_RC_nnlc_ResIter%dFigure_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" % (slc, rep, rdim, cdim, rank, tol, eqratio, maskratio))\n","\n","        # make a residual-iteration figure\n","        #plt.xticks(np.arange(subviolation_sum.shape[0]))\n","        #plt.xlim(0, subviolation_sum.shape[0]-1)\n","        #axs.grid(True)\n","        minlog10res = np.log10(subviolation_sum).min().min()\n","        maxlog10res = min(np.log10(subviolation_sum).max().max(), 3)\n","        minlog10res = math.floor(minlog10res) - 2\n","        maxlog10res = math.ceil(maxlog10res) + 1\n","        # xtime_array = np.arange(start = mintime, stop = maxtime, step = 0.1)\n","        #plt.xlim(0, maxtime)\n","        plt.ylim(minlog10res, maxlog10res)\n","        axs.plot(np.arange(subviolation_sum.shape[0]), np.log10(subviolation_sum), label = subviolation_sum.columns)\n","        axs.legend(subviolation_sum.columns, loc='upper right')\n","        #axs.hlines(-1 * tol, 0, max(time.max()), \"black\", linestyles='dashed') # hlines\n","        axs.set(xlabel = \"Iteration\")\n","        axs.set(ylabel = 'Residual (log10 scale)')\n","        plt.subplots_adjust(wspace=0.3, hspace=0.3)\n","        title = \"grid_RC_nnlc_ResIter%dFigure_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e\" % (slc, rep, rdim, cdim, rank, tol, eqratio, maskratio)\n","        plt.savefig(root_dir + output_dir + title + \".pdf\")\n","        plt.close()\n","\n","        # make a time-iteration table\n","        subtime = time.iloc[:slc,:]\n","        subtime.rename(columns={'ALM' : 'RALM','LSE' : 'REPM(LSE)', 'LQH' : 'REPM(LQH)' ,'fmincon_SQP': 'fmincon SQO', 'Riemannian_SQP': 'RSQO'}, inplace=True)\n","        print(subtime)\n","        subtime.to_csv(root_dir + output_dir + \"grid_RC_nnlc_ResIter%dFigure_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" % (slc, rep, rdim, cdim, rank, tol, eqratio, maskratio))\n","\n","        # reset figure\n","        restime_fig, restime_axs = plt.subplots(dpi=600)\n","\n","        # make a residual-time table for the first slc iterations\n","        mintime = subtime.min().min()  # take min() twice for the overall minimal time \n","        maxtime = subtime.max().max()\n","        mintime = math.floor(mintime)\n","        maxtime = math.ceil(maxtime) + 1\n","\n","        minlog10res = np.log10(subviolation_sum).min().min()\n","        maxlog10res = min(np.log10(subviolation_sum).max().max(), 3)\n","        minlog10res = math.floor(minlog10res) - 2\n","        maxlog10res = math.ceil(maxlog10res) + 1\n","        # xtime_array = np.arange(start = mintime, stop = maxtime, step = 0.1)\n","        #plt.xlim(0, maxtime)\n","        plt.ylim(minlog10res, maxlog10res)\n","        restime_axs.grid(True)\n","        for method in method_set:\n","          method_time = time[method].values\n","          method_residual = violation_sum[method].values\n","          restime_axs.plot(method_time, np.log10(method_residual))\n","        restime_axs.legend(subviolation_sum.columns, loc='upper right', fontsize = 'small')\n","        restime_axs.set(xlabel = \"Time\")\n","        restime_axs.set(ylabel = 'Residual (log10 scale)')\n","        plt.subplots_adjust(wspace=0.3, hspace=0.3)\n","        title = \"grid_RC_nnlc_ResTime%dFigure_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e\" % (slc, rep, rdim, cdim, rank, tol, eqratio, maskratio)\n","        plt.savefig(root_dir + output_dir + title + \".pdf\")\n","        plt.close()"],"execution_count":null,"outputs":[]}]}