{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"nonnegA_RC_nn_processor","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"WOkcqUr1x7Gk"},"source":["**Postprocessor about KKT residual**"]},{"cell_type":"markdown","metadata":{"id":"lhtGDVuay1aC"},"source":["# Overall preliminaries"]},{"cell_type":"code","metadata":{"id":"J_v63uV-xx0H","executionInfo":{"status":"ok","timestamp":1612857994252,"user_tz":-540,"elapsed":692,"user":{"displayName":"Mitsuaki Obara","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgTc8J_ZbYtCo4EduXT-CtVU_yA3tGcM2yJdBrd=s64","userId":"01228617048231420770"}}},"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import math"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"id":"ibRpNxX4yBfs","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1612857994922,"user_tz":-540,"elapsed":340,"user":{"displayName":"Mitsuaki Obara","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgTc8J_ZbYtCo4EduXT-CtVU_yA3tGcM2yJdBrd=s64","userId":"01228617048231420770"}},"outputId":"4ee6a843-41c7-45eb-b987-134f60e6f86e"},"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","root_dir=\"/content/drive/My Drive/Codes/Seqential-quadratic-programming-on-manifold/\"\n","output_dir = \"postprocessor/nonnegA_RC_nn/\""],"execution_count":7,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"JCHXIkSlyFbH"},"source":["# nonnegA_RC_nn processor\n"]},{"cell_type":"markdown","metadata":{"id":"wnqV7podytig"},"source":["## Preliminaries"]},{"cell_type":"code","metadata":{"id":"HWwmTO_8yErG","executionInfo":{"status":"ok","timestamp":1612857996438,"user_tz":-540,"elapsed":484,"user":{"displayName":"Mitsuaki Obara","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgTc8J_ZbYtCo4EduXT-CtVU_yA3tGcM2yJdBrd=s64","userId":"01228617048231420770"}}},"source":["rep = 1\n","dim_set = [[4,8], [5,10], [6,12], [7,14]]\n","rank_set = [2,3]\n","tol = 16\n","init_tolcheckpow = -3\n","method_set = ['ALM', 'LQH', 'LSE', 'Riemannian_SQP']\n","input_dir = \"result/nonnegA_RC_nn/\""],"execution_count":8,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"y5zj3ppxSl2X"},"source":["## ResItes, ResIter, AveTime Tables"]},{"cell_type":"code","metadata":{"id":"bNGsHgTsQAw2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1612858000289,"user_tz":-540,"elapsed":1849,"user":{"displayName":"Mitsuaki Obara","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgTc8J_ZbYtCo4EduXT-CtVU_yA3tGcM2yJdBrd=s64","userId":"01228617048231420770"}},"outputId":"d266bbbf-24cb-4c8a-abdd-a1795edd5217"},"source":["for rank in rank_set:\n","  ave_time_output = pd.DataFrame()\n","  for dim in dim_set:\n","    time_output = pd.DataFrame()\n","    iter_output = pd.DataFrame()\n","    ave_time_in_dim = pd.DataFrame()\n","    rdim = dim[0]\n","    cdim = dim[1]\n","\n","    for method in method_set:\n","      data = pd.read_csv(root_dir + input_dir + \"RC_nn_%s_nrep%dRowdim%dColdim%dRank%dTol%d.csv\" %(method, rep, rdim, cdim, rank, tol))\n","      cols = data[['KKT_residual', 'time', 'iter']].copy()\n","      cols.name = method\n","      \n","      tolcheckpow = init_tolcheckpow\n","      time = []\n","      iter = []\n","\n","      ncol = cols.shape[0]\n","      while True:\n","        flag = False\n","        for i in range(ncol):\n","          if (data['KKT_residual'][i] < pow(10, -tolcheckpow)):\n","            time += [data['time'][i]]\n","            iter += [data['iter'][i]]\n","            tolcheckpow += 1\n","            flag = True\n","            break\n","        if not flag:\n","          break\n","\n","      time_outputcol = pd.Series(data = np.array(time), name = method)\n","      time_output = pd.concat([time_output, time_outputcol], axis = 1)\n","      iter_outputcol = pd.Series(data = np.array(iter), name = method)\n","      iter_output = pd.concat([iter_output, iter_outputcol], axis = 1)\n","\n","      total_time = data['time'][-1:].values[0]\n","      total_iter_num = data['time'][-1:].index[0]\n","      ave_time = total_time / total_iter_num\n","      #print(ave_time)\n","      ave_time_in_dim.insert(len(ave_time_in_dim.columns), method, [ave_time])\n","      #print(ave_time_in_dim)\n","\n","      # ave_time_output = pd.concat([ave_time_output, ave_time_outputcol], axis = 1)\n","    \n","    ave_time_in_dim[\"dim\"] = str(dim)\n","    ave_time_output = pd.concat([ave_time_output, ave_time_in_dim], axis = 0)\n","    time_fintotal_checkpow = time_output.shape[0] + init_tolcheckpow\n","    time_output[\"log10residual\"] = pd.RangeIndex(start = init_tolcheckpow, stop = time_fintotal_checkpow)\n","    iter_fintotal_checkpow = iter_output.shape[0] + init_tolcheckpow\n","    iter_output[\"log10residual\"] = pd.RangeIndex(start = init_tolcheckpow, stop = iter_fintotal_checkpow)\n","\n","    print(time_output)\n","    time_output.to_csv(root_dir + output_dir + \"nonnegA_RC_nn_ResTimeTable_nrep%dRowdim%dColdim%dRank%dTol%d.csv\" %(rep, rdim, cdim, rank, tol))\n","    print(iter_output)\n","    iter_output.to_csv(root_dir + output_dir + \"nonnegA_RC_nn_ResIterTable_nrep%dRowdim%dColdim%dRank%dTol%d.csv\" %(rep, rdim, cdim, rank, tol))\n","\n","  print(ave_time_output)\n","  ave_time_output.to_csv(root_dir + output_dir + \"nonnegA_RC_nn_WholeAveTimeTable_nrep%dRank%dTol%d.csv\" %(rep, rank, tol))"],"execution_count":9,"outputs":[{"output_type":"stream","text":["        ALM      LQH      LSE  Riemannian_SQP  log10residual\n","0    0.0000  0.00000  0.00000        0.000099             -3\n","1    0.0000  0.00000  0.00000        0.000099             -2\n","2    0.0000  0.00000  0.00000        0.000099             -1\n","3    1.0638  0.10003  0.14819        0.498130              0\n","4    1.4949  0.10003  0.14819        0.892880              1\n","5    1.4949  0.10003  0.25904        1.155800              2\n","6    1.5496  0.14885  0.39928        1.281700              3\n","7    1.5496  0.23387  0.44441        1.321300              4\n","8    1.6109  0.59050  0.48766        1.403000              5\n","9    1.6483  0.77175  0.52693        1.532600              6\n","10   1.7752      NaN  0.52693        1.656300              7\n","11   1.8345      NaN  0.57730        2.482500              8\n","12   1.8770      NaN  0.59422       12.463600              9\n","13   5.1392      NaN  0.63258             NaN             10\n","14   7.9347      NaN  0.72098             NaN             11\n","15   9.6688      NaN  0.82400             NaN             12\n","16  27.3375      NaN  0.95691             NaN             13\n","     ALM   LQH  LSE  Riemannian_SQP  log10residual\n","0      0   0.0    0             0.0             -3\n","1      0   0.0    0             0.0             -2\n","2      0   0.0    0             0.0             -1\n","3      1   1.0    1             4.0              0\n","4      2   1.0    1            12.0              1\n","5      2   1.0    3            18.0              2\n","6      3   2.0    6            21.0              3\n","7      3   7.0    7            22.0              4\n","8      6  13.0    8            24.0              5\n","9      8  20.0    9            27.0              6\n","10    11   NaN    9            30.0              7\n","11    13   NaN   13            49.0              8\n","12    16   NaN   15           290.0              9\n","13   564   NaN   19             NaN             10\n","14  1076   NaN   28             NaN             11\n","15  1391   NaN   38             NaN             12\n","16  4607   NaN   51             NaN             13\n","        ALM       LQH       LSE  Riemannian_SQP  log10residual\n","0    0.0000   0.00000   0.00000        0.000043             -3\n","1    0.0000   0.00000   0.00000        0.000043             -2\n","2    0.0000   0.00000   0.00000        0.000043             -1\n","3    1.3486   0.32224   0.87467        0.191940              0\n","4    1.3486   0.32224   0.87467        0.483930              1\n","5    2.1441   0.32224   4.67270        1.746100              2\n","6    3.7182   0.32224   9.30870        2.224400              3\n","7    4.7545   2.70880  15.12670        2.410000              4\n","8   13.7792  15.81000  18.63540        3.501900              5\n","9       NaN  17.92810       NaN        4.717400              6\n","10      NaN       NaN       NaN        4.867000              7\n","11      NaN       NaN       NaN        5.093000              8\n","     ALM   LQH   LSE  Riemannian_SQP  log10residual\n","0    0.0   0.0   0.0               0             -3\n","1    0.0   0.0   0.0               0             -2\n","2    0.0   0.0   0.0               0             -1\n","3    2.0   1.0   1.0               2              0\n","4    2.0   1.0   1.0               6              1\n","5    3.0   1.0   5.0              22              2\n","6    5.0   1.0   9.0              28              3\n","7    7.0   6.0  14.0              30              4\n","8   18.0  34.0  17.0              44              5\n","9    NaN  53.0   NaN              60              6\n","10   NaN   NaN   NaN              62              7\n","11   NaN   NaN   NaN              65              8\n","        ALM        LQH      LSE  Riemannian_SQP  log10residual\n","0    0.0000   0.000000   0.0000        0.000166             -3\n","1    0.0000   0.000000   0.0000        0.000166             -2\n","2    0.0000   0.000000   0.0000        0.000166             -1\n","3    1.1017   0.091601   1.2422        0.491650              0\n","4    1.8294   0.091601   1.2422        1.599700              1\n","5    1.8294   0.091601   2.6785        4.944600              2\n","6    2.4860   0.091601   5.5138        6.028100              3\n","7   10.8346   0.467460  10.5750        6.290200              4\n","8       NaN   0.550450  10.5750        6.418900              5\n","9       NaN   0.885190      NaN        6.550300              6\n","10      NaN   0.905600      NaN        6.550300              7\n","11      NaN   0.988840      NaN        6.550300              8\n","12      NaN   1.117600      NaN        6.550300              9\n","13      NaN   1.126300      NaN        6.681900             10\n","14      NaN   1.138200      NaN             NaN             11\n","15      NaN   1.158100      NaN             NaN             12\n","16      NaN  10.825800      NaN             NaN             13\n","     ALM   LQH   LSE  Riemannian_SQP  log10residual\n","0    0.0     0   0.0             0.0             -3\n","1    0.0     0   0.0             0.0             -2\n","2    0.0     0   0.0             0.0             -1\n","3    1.0     1   1.0             3.0              0\n","4    2.0     1   1.0            11.0              1\n","5    2.0     1   3.0            35.0              2\n","6    3.0     1   6.0            43.0              3\n","7   13.0     4  10.0            45.0              4\n","8    NaN     6  10.0            46.0              5\n","9    NaN     7   NaN            47.0              6\n","10   NaN    10   NaN            47.0              7\n","11   NaN    13   NaN            47.0              8\n","12   NaN    15   NaN            47.0              9\n","13   NaN    17   NaN            48.0             10\n","14   NaN    19   NaN             NaN             11\n","15   NaN    22   NaN             NaN             12\n","16   NaN  1351   NaN             NaN             13\n","       ALM      LQH      LSE  Riemannian_SQP  log10residual\n","0   0.0000  0.00000   0.0000        0.000026             -3\n","1   0.0000  0.00000   0.0000        0.000026             -2\n","2   0.0000  0.00000   0.0000        0.000026             -1\n","3   1.7130  0.11247   1.4406        1.305500              0\n","4   1.7130  0.11247   1.4406        3.347000              1\n","5   2.3143  0.11247   6.5646        5.177600              2\n","6   5.5928  0.11247  11.4049        5.973500              3\n","7   7.3474  0.24399  18.6203        6.379700              4\n","8      NaN  0.31224  18.6203       12.416700              5\n","9      NaN  0.41386  20.0942       12.609800              6\n","10     NaN  0.80835  22.8672       12.609800              7\n","11     NaN  0.83754  26.5160             NaN              8\n","12     NaN  0.90042      NaN             NaN              9\n","13     NaN  1.94930      NaN             NaN             10\n","     ALM  LQH   LSE  Riemannian_SQP  log10residual\n","0    0.0    0   0.0             0.0             -3\n","1    0.0    0   0.0             0.0             -2\n","2    0.0    0   0.0             0.0             -1\n","3    2.0    1   1.0             6.0              0\n","4    2.0    1   1.0            16.0              1\n","5    3.0    1   4.0            25.0              2\n","6    8.0    1   7.0            29.0              3\n","7   10.0    3  12.0            31.0              4\n","8    NaN    6  12.0            62.0              5\n","9    NaN    8  15.0            63.0              6\n","10   NaN   10  21.0            63.0              7\n","11   NaN   13  28.0             NaN              8\n","12   NaN   15   NaN             NaN              9\n","13   NaN  137   NaN             NaN             10\n","        ALM       LQH       LSE  Riemannian_SQP      dim\n","0  0.005917  0.023317  0.014310        0.041590   [4, 8]\n","0  0.097305  0.095744  1.126507        0.075028  [5, 10]\n","0  0.212536  0.007426  1.203042        0.129935  [6, 12]\n","0  0.832086  0.008476  0.763579        0.195566  [7, 14]\n","        ALM       LQH       LSE  Riemannian_SQP  log10residual\n","0   0.00000  0.000000  0.000000        0.000059             -3\n","1   0.00000  0.000000  0.000000        0.000059             -2\n","2   0.00000  0.000000  0.000000        0.000059             -1\n","3   0.11275  0.011820  0.040260        0.214390              0\n","4   0.11275  0.011820  0.040260        0.214390              1\n","5   0.11275  0.011820  0.072434        0.319980              2\n","6   0.11275  0.011820  0.102080        0.319980              3\n","7   0.11275  0.018692  0.113600        0.319980              4\n","8   0.12195  0.027923  0.113600        0.986640              5\n","9   0.13255  0.035787  0.124780        0.986640              6\n","10  0.14419  0.042316  0.145990        0.986640              7\n","11  0.15572  0.051614  0.165700        0.986640              8\n","12  0.15999  0.058417  0.173060        0.986640              9\n","13  0.17410  0.064264  0.192630        1.045900             10\n","14  0.18592  0.071175  0.212130             NaN             11\n","15  0.19024  0.080530  0.219490             NaN             12\n","16  0.20168  0.086319  0.238740             NaN             13\n","17  0.21694  0.093243       NaN             NaN             14\n","    ALM  LQH   LSE  Riemannian_SQP  log10residual\n","0     0    0   0.0             0.0             -3\n","1     0    0   0.0             0.0             -2\n","2     0    0   0.0             0.0             -1\n","3     2    1   1.0             3.0              0\n","4     2    1   1.0             3.0              1\n","5     2    1   3.0             5.0              2\n","6     2    1   5.0             5.0              3\n","7     2    3   6.0             5.0              4\n","8     4    6   6.0            17.0              5\n","9     7    8   7.0            17.0              6\n","10   10   10  10.0            17.0              7\n","11   13   13  13.0            17.0              8\n","12   14   15  14.0            17.0              9\n","13   17   17  17.0            18.0             10\n","14   20   19  20.0             NaN             11\n","15   21   22  21.0             NaN             12\n","16   24   24  24.0             NaN             13\n","17   27   26   NaN             NaN             14\n","       ALM      LQH       LSE  Riemannian_SQP  log10residual\n","0   0.0000  0.00000   0.00000        0.000042             -3\n","1   0.0000  0.00000   0.00000        0.000042             -2\n","2   0.0000  0.00000   0.00000        0.000042             -1\n","3   0.8863  0.39929   0.53764        0.354400              0\n","4   1.3639  0.39929   0.53764        1.670300              1\n","5   1.3639  0.39929   0.71281        3.347400              2\n","6   2.0188  0.48859   4.42040        3.999200              3\n","7   2.0373  1.31740  10.58540        4.117500              4\n","8   7.7660  1.42800  25.02860        7.183800              5\n","9      NaN      NaN       NaN        7.291200              6\n","10     NaN      NaN       NaN        7.402700              7\n","11     NaN      NaN       NaN        9.415000              8\n","12     NaN      NaN       NaN       28.737400              9\n","     ALM   LQH   LSE  Riemannian_SQP  log10residual\n","0    0.0   0.0   0.0               0             -3\n","1    0.0   0.0   0.0               0             -2\n","2    0.0   0.0   0.0               0             -1\n","3    1.0   1.0   1.0               3              0\n","4    2.0   1.0   1.0              15              1\n","5    2.0   1.0   3.0              30              2\n","6    3.0   3.0   6.0              36              3\n","7    4.0   9.0  11.0              37              4\n","8   12.0  15.0  23.0              65              5\n","9    NaN   NaN   NaN              66              6\n","10   NaN   NaN   NaN              67              7\n","11   NaN   NaN   NaN              86              8\n","12   NaN   NaN   NaN             269              9\n","        ALM      LQH      LSE  Riemannian_SQP  log10residual\n","0    0.0000  0.00000   0.0000        0.000038             -3\n","1    0.0000  0.00000   0.0000        0.000038             -2\n","2    0.9315  0.00000   0.0000        0.232910             -1\n","3    1.3053  0.21013   1.3033        0.786230              0\n","4    1.3053  0.21013   1.3033        3.143500              1\n","5    1.3382  0.21013   4.3505        4.041800              2\n","6    1.3382  0.21013   8.6788        4.217900              3\n","7    1.4183  0.27331  12.8441        4.217900              4\n","8    7.6992  0.31654  17.7578        4.397000              5\n","9    7.6992  1.58800  17.7578        7.807000              6\n","10   7.6992  1.59430  17.7578             NaN              7\n","11   7.6992  1.63150  17.7578             NaN              8\n","12   7.7231  1.70630  17.7578             NaN              9\n","13   8.0878  1.73400  18.0201             NaN             10\n","14   9.1871  2.01930  19.0708             NaN             11\n","15  13.2621  2.56960      NaN             NaN             12\n","16      NaN  5.77090      NaN             NaN             13\n","      ALM  LQH   LSE  Riemannian_SQP  log10residual\n","0     0.0    0   0.0             0.0             -3\n","1     0.0    0   0.0             0.0             -2\n","2     1.0    0   0.0             1.0             -1\n","3     2.0    1   1.0             4.0              0\n","4     2.0    1   1.0            17.0              1\n","5     3.0    1   4.0            22.0              2\n","6     3.0    1   7.0            23.0              3\n","7     4.0    4  10.0            23.0              4\n","8    13.0    6  14.0            24.0              5\n","9    13.0    9  14.0            43.0              6\n","10   13.0   10  14.0             NaN              7\n","11   13.0   13  14.0             NaN              8\n","12   15.0   15  14.0             NaN              9\n","13   63.0   19  29.0             NaN             10\n","14  204.0   60  87.0             NaN             11\n","15  743.0  139   NaN             NaN             12\n","16    NaN  595   NaN             NaN             13\n","       ALM     LQH     LSE  Riemannian_SQP  log10residual\n","0   0.0000  0.0000  0.0000        0.000026             -3\n","1   0.0000  0.0000  0.0000        0.000026             -2\n","2   1.2649  0.0000  0.0000        0.345600             -1\n","3   1.2649  0.5000  1.0856        1.761600              0\n","4   2.1238  0.5000  1.0856        5.293400              1\n","5   2.1238  0.5000  2.9352        7.996200              2\n","6   2.5041  0.5000  5.7533       19.165200              3\n","7   2.5243  2.0330  9.1905       24.699900              4\n","8   2.6073  5.5773     NaN       28.448100              5\n","9      NaN  5.6468     NaN             NaN              6\n","10     NaN  5.8075     NaN             NaN              7\n","    ALM  LQH  LSE  Riemannian_SQP  log10residual\n","0   0.0    0  0.0             0.0             -3\n","1   0.0    0  0.0             0.0             -2\n","2   1.0    0  0.0             1.0             -1\n","3   1.0    1  1.0             6.0              0\n","4   2.0    1  1.0            18.0              1\n","5   2.0    1  3.0            27.0              2\n","6   3.0    1  6.0            64.0              3\n","7   4.0    4  8.0            83.0              4\n","8   6.0    9  NaN            96.0              5\n","9   NaN   11  NaN             NaN              6\n","10  NaN   17  NaN             NaN              7\n","        ALM       LQH       LSE  Riemannian_SQP      dim\n","0  0.009191  0.007593  0.013252        0.054264   [4, 8]\n","0  0.204966  0.016887  1.109250        0.106833  [5, 10]\n","0  0.010265  0.008002  0.044763        0.176510  [6, 12]\n","0  0.833697  0.183685  1.499880        0.295525  [7, 14]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"QV3DnG2vSrUA"},"source":["## ResIter, ResTime Figures"]},{"cell_type":"code","metadata":{"id":"-6t7d92LQtHh","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1612858025187,"user_tz":-540,"elapsed":5574,"user":{"displayName":"Mitsuaki Obara","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgTc8J_ZbYtCo4EduXT-CtVU_yA3tGcM2yJdBrd=s64","userId":"01228617048231420770"}},"outputId":"40be5afa-555f-4fb9-8ade-f51bbe345bdd"},"source":["# make subtables (residual per slc iterations and time per slc iterations) \n","slc = -1\n","for rank in rank_set:\n","  for dim in dim_set:\n","    fig, axs = plt.subplots(dpi=600)\n","    time = pd.DataFrame()\n","    violation_sum = pd.DataFrame()\n","    rdim = dim[0]\n","    cdim = dim[1]\n","    for method in method_set:\n","      data = pd.read_csv(root_dir + input_dir + \"RC_nn_%s_nrep%dRowdim%dColdim%dRank%dTol%d.csv\" %(method, rep, rdim, cdim, rank, tol))\n","\n","      try:\n","        coltime = data['time'].copy()\n","        coltime.name = method\n","        time = pd.concat([time, coltime], axis = 1)\n","      except:\n","        pass\n","\n","      try:\n","        colviosum = data['KKT_residual'].copy()\n","        colviosum.name = method\n","        violation_sum = pd.concat([violation_sum, colviosum], axis = 1)\n","      except:\n","        pass\n","\n","    # make a residual-iteration table\n","    subviolation_sum = violation_sum.iloc[:slc,:]\n","    subviolation_sum.rename(columns={'ALM' : 'RALM','LSE' : 'REPM(LSE)', 'LQH' : 'REPM(LQH)' , 'Riemannian_SQP': 'RSQO'}, inplace=True)\n","    print(subviolation_sum)\n","    subviolation_sum.to_csv(root_dir + output_dir + \"nonnegA_RC_nn_ResIter%dFigure_nrep%dRowdim%dColdim%dRank%dTol%d.csv\" % (slc, rep, rdim, cdim, rank, tol))\n","\n","    # make a residual-iteration figure\n","    #plt.xticks(np.arange(subviolation_sum.shape[0]))\n","    #plt.xlim(0, subviolation_sum.shape[0]-1)\n","    #axs.grid(True)\n","    axs.plot(np.arange(subviolation_sum.shape[0]), np.log10(subviolation_sum), label = subviolation_sum.columns)\n","    axs.legend(subviolation_sum.columns, loc='upper right')\n","    #axs.hlines(-1 * tol, 0, max(time.max()), \"black\", linestyles='dashed') # hlines\n","    axs.set(xlabel = \"Iteration\")\n","    axs.set(ylabel = 'Residual (log10 scale)')\n","    plt.subplots_adjust(wspace=0.3, hspace=0.3)\n","    title = \"nonnegA_RC_nn_ResIter%dFigure_nrep%dRowdim%dColdim%dRank%dTol%d\" % (slc, rep, rdim, cdim, rank, tol)\n","    plt.savefig(root_dir + output_dir + title + \".pdf\")\n","    plt.close()\n","\n","    # make a time-iteration table\n","    subtime = time.iloc[:slc,:]\n","    subtime.rename(columns={'ALM' : 'RALM','LSE' : 'REPM(LSE)', 'LQH' : 'REPM(LQH)' ,'fmincon_SQP': 'fmincon SQO', 'Riemannian_SQP': 'RSQO'}, inplace=True)\n","    print(subtime)\n","    subtime.to_csv(root_dir + output_dir + \"nonnegA_RC_nn_ResIter%dFigure_nrep%dRowdim%dColdim%dRank%dTol%d.csv\" % (slc, rep, rdim, cdim, rank, tol))\n","\n","    # reset figure\n","    restime_fig, restime_axs = plt.subplots(dpi=600)\n","\n","    # make a residual-time table for the first slc iterations\n","    mintime = subtime.min().min()  # take min() twice for the overall minimal time \n","    maxtime = subtime.max().max()\n","    mintime = math.floor(mintime)\n","    maxtime = math.ceil(maxtime) + 1\n","\n","    minlog10res = np.log10(subviolation_sum).min().min()\n","    maxlog10res = min(np.log10(subviolation_sum).max().max(), np.log10(1))\n","    minlog10res = math.floor(minlog10res) - 2\n","    maxlog10res = math.ceil(maxlog10res) + 1\n","    # xtime_array = np.arange(start = mintime, stop = maxtime, step = 0.1)\n","    #plt.xlim(0, maxtime)\n","    plt.ylim(minlog10res, maxlog10res)\n","    restime_axs.grid(True)\n","    for method in method_set:\n","      method_time = time[method].values\n","      method_residual = violation_sum[method].values\n","      restime_axs.plot(method_time, np.log10(method_residual))\n","    restime_axs.legend(subviolation_sum.columns, loc='upper right', fontsize = 'small')\n","    restime_axs.set(xlabel = \"Time\")\n","    restime_axs.set(ylabel = 'Residual (log10 scale)')\n","    plt.subplots_adjust(wspace=0.3, hspace=0.3)\n","    title = \"nonnegA_RC_nn_ResTime%dFigure_nrep%dRowdim%dColdim%dRank%dTol%d\" % (slc, rep, rdim, cdim, rank, tol)\n","    plt.savefig(root_dir + output_dir + title + \".pdf\")\n","    plt.close()"],"execution_count":10,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["              RALM  REPM(LQH)  REPM(LSE)     RSQO\n","0     6.345700e+00   2.690100   4.387800  6.64790\n","1     6.793500e-01   0.001104   0.040212  2.28920\n","2     6.845500e-03   0.000654   0.018080  1.08710\n","3     6.126300e-05   0.000448   0.007972  1.15280\n","4     3.749600e-05   0.000297   0.003620  0.60729\n","...            ...        ...        ...      ...\n","4781  1.467500e-13        NaN        NaN      NaN\n","4782  1.492000e-13        NaN        NaN      NaN\n","4783  1.497100e-13        NaN        NaN      NaN\n","4784  1.526800e-13        NaN        NaN      NaN\n","4785  1.552900e-13        NaN        NaN      NaN\n","\n","[4786 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["         RALM  REPM(LQH)  REPM(LSE)      RSQO\n","0      0.0000    0.00000    0.00000  0.000099\n","1      1.0638    0.10003    0.14819  0.328210\n","2      1.4949    0.14885    0.21013  0.384960\n","3      1.5496    0.15702    0.25904  0.436800\n","4      1.5589    0.17460    0.30833  0.498130\n","...       ...        ...        ...       ...\n","4781  28.2912        NaN        NaN       NaN\n","4782  28.2964        NaN        NaN       NaN\n","4783  28.3026        NaN        NaN       NaN\n","4784  28.3086        NaN        NaN       NaN\n","4785  28.3139        NaN        NaN       NaN\n","\n","[4786 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["         RALM  REPM(LQH)  REPM(LSE)          RSQO\n","0    6.232300   2.069500   3.944900  6.400300e+00\n","1    1.049900   0.000994   0.088408  1.983700e+00\n","2    0.023345   0.000320   0.049108  7.773300e-01\n","3    0.001096   0.000120   0.026129  3.992900e-01\n","4    0.001447   0.000244   0.013680  2.826000e-01\n","..        ...        ...        ...           ...\n","395       NaN        NaN        NaN  1.088400e-09\n","396       NaN        NaN        NaN  1.088400e-09\n","397       NaN        NaN        NaN  1.088400e-09\n","398       NaN        NaN        NaN  1.088400e-09\n","399       NaN        NaN        NaN  1.088400e-09\n","\n","[400 rows x 4 columns]\n","        RALM  REPM(LQH)  REPM(LSE)       RSQO\n","0    0.00000    0.00000    0.00000   0.000043\n","1    0.85547    0.32224    0.87467   0.119670\n","2    1.34860    0.37214    2.05390   0.191940\n","3    2.14410    0.38976    3.25510   0.263890\n","4    2.93500    1.15220    3.47660   0.336590\n","..       ...        ...        ...        ...\n","395      NaN        NaN        NaN  29.643200\n","396      NaN        NaN        NaN  29.715900\n","397      NaN        NaN        NaN  29.789000\n","398      NaN        NaN        NaN  29.862000\n","399      NaN        NaN        NaN  29.938200\n","\n","[400 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n","/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["          RALM     REPM(LQH)  REPM(LSE)     RSQO\n","0     7.975700  3.212500e+00   5.428300  8.21390\n","1     0.921410  6.890800e-04   0.042449  3.17650\n","2     0.006517  3.456100e-04   0.017787  3.92900\n","3     0.000114  1.061000e-04   0.008243  0.82807\n","4     0.000335  4.932300e-05   0.003866  0.50641\n","...        ...           ...        ...      ...\n","2729       NaN  7.163500e-14        NaN      NaN\n","2730       NaN  6.554900e-14        NaN      NaN\n","2731       NaN  7.475600e-14        NaN      NaN\n","2732       NaN  7.157400e-14        NaN      NaN\n","2733       NaN  7.157400e-14        NaN      NaN\n","\n","[2734 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["        RALM  REPM(LQH)  REPM(LSE)      RSQO\n","0     0.0000   0.000000     0.0000  0.000166\n","1     1.1017   0.091601     1.2422  0.202140\n","2     1.8294   0.163920     1.3318  0.351460\n","3     2.4860   0.178810     2.6785  0.491650\n","4     3.0205   0.467460     2.9944  0.628980\n","...      ...        ...        ...       ...\n","2729     NaN  20.205700        NaN       NaN\n","2730     NaN  20.212500        NaN       NaN\n","2731     NaN  20.219100        NaN       NaN\n","2732     NaN  20.225700        NaN       NaN\n","2733     NaN  20.264700        NaN       NaN\n","\n","[2734 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["          RALM     REPM(LQH)  REPM(LSE)    RSQO\n","0     6.855800  1.539200e+00   3.960500  7.1415\n","1     1.125400  7.121000e-04   0.066108  1.9090\n","2     0.010585  3.643100e-04   0.028793  6.0434\n","3     0.005515  8.492700e-05   0.011852  2.5755\n","4     0.001889  2.294300e-05   0.005798  2.2249\n","...        ...           ...        ...     ...\n","3297       NaN  8.555100e-11        NaN     NaN\n","3298       NaN  8.555100e-11        NaN     NaN\n","3299       NaN  8.555000e-11        NaN     NaN\n","3300       NaN  8.555000e-11        NaN     NaN\n","3301       NaN  8.554900e-11        NaN     NaN\n","\n","[3302 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["        RALM  REPM(LQH)  REPM(LSE)      RSQO\n","0     0.0000    0.00000     0.0000  0.000026\n","1     1.1696    0.11247     1.4406  0.252260\n","2     1.7130    0.15467     3.1284  0.466120\n","3     2.3143    0.24399     4.8233  0.686230\n","4     2.8902    0.26139     6.5646  0.895830\n","...      ...        ...        ...       ...\n","3297     NaN   27.94430        NaN       NaN\n","3298     NaN   27.95230        NaN       NaN\n","3299     NaN   27.96070        NaN       NaN\n","3300     NaN   27.97000        NaN       NaN\n","3301     NaN   27.98070        NaN       NaN\n","\n","[3302 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n","/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["         RALM  REPM(LQH)  REPM(LSE)          RSQO\n","0    7.194700   2.632000   4.831700  7.325900e+00\n","1    1.141000   0.000274   0.063189  1.990500e+00\n","2    0.000085   0.000274   0.025706  1.237800e+00\n","3    0.000085   0.000067   0.008320  7.111800e-02\n","4    0.000003   0.000017   0.001799  3.908100e-02\n","..        ...        ...        ...           ...\n","548       NaN        NaN        NaN  9.896400e-11\n","549       NaN        NaN        NaN  9.896400e-11\n","550       NaN        NaN        NaN  9.896400e-11\n","551       NaN        NaN        NaN  9.896400e-11\n","552       NaN        NaN        NaN  9.896400e-11\n","\n","[553 rows x 4 columns]\n","         RALM  REPM(LQH)  REPM(LSE)       RSQO\n","0    0.000000   0.000000   0.000000   0.000059\n","1    0.081327   0.011820   0.040260   0.106360\n","2    0.112750   0.014750   0.056326   0.162160\n","3    0.117110   0.018692   0.072434   0.214390\n","4    0.121950   0.022243   0.088136   0.267000\n","..        ...        ...        ...        ...\n","548       NaN        NaN        NaN  29.746600\n","549       NaN        NaN        NaN  29.798600\n","550       NaN        NaN        NaN  29.851200\n","551       NaN        NaN        NaN  29.903200\n","552       NaN        NaN        NaN  29.955700\n","\n","[553 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["          RALM  REPM(LQH)  REPM(LSE)     RSQO\n","0     9.305400   4.070300   6.582500  9.62240\n","1     0.922780   0.001724   0.037564  3.45610\n","2     0.007794   0.001067   0.016336  1.18650\n","3     0.000111   0.000718   0.008217  0.48031\n","4     0.000030   0.000491   0.004156  0.41362\n","...        ...        ...        ...      ...\n","1099       NaN   0.000002        NaN      NaN\n","1100       NaN   0.000003        NaN      NaN\n","1101       NaN   0.000002        NaN      NaN\n","1102       NaN   0.000003        NaN      NaN\n","1103       NaN   0.000003        NaN      NaN\n","\n","[1104 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["        RALM  REPM(LQH)  REPM(LSE)      RSQO\n","0     0.0000    0.00000    0.00000  0.000042\n","1     0.8863    0.39929    0.53764  0.146380\n","2     1.3639    0.47966    0.64345  0.247570\n","3     2.0188    0.48859    0.71281  0.354400\n","4     2.0373    0.49993    1.96240  0.465580\n","...      ...        ...        ...       ...\n","1099     NaN   18.52830        NaN       NaN\n","1100     NaN   18.54480        NaN       NaN\n","1101     NaN   18.56470        NaN       NaN\n","1102     NaN   18.57920        NaN       NaN\n","1103     NaN   18.61100        NaN       NaN\n","\n","[1104 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["              RALM  REPM(LQH)  REPM(LSE)      RSQO\n","0     1.034720e+01   4.702700   7.354600  10.56290\n","1     1.119400e+00   0.000754   0.057214   3.32420\n","2     1.024400e-02   0.000363   0.026500   1.86660\n","3     1.258200e-04   0.000131   0.012680   1.35110\n","4     5.397000e-05   0.000037   0.005978   0.96555\n","...            ...        ...        ...       ...\n","2784  2.553000e-13        NaN        NaN       NaN\n","2785  2.645900e-13        NaN        NaN       NaN\n","2786  2.587000e-13        NaN        NaN       NaN\n","2787  2.549900e-13        NaN        NaN       NaN\n","2788  2.643000e-13        NaN        NaN       NaN\n","\n","[2789 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["         RALM  REPM(LQH)  REPM(LSE)      RSQO\n","0      0.0000    0.00000     0.0000  0.000038\n","1      0.9315    0.21013     1.3033  0.232910\n","2      1.3053    0.22614     1.4965  0.428360\n","3      1.3382    0.25845     2.9407  0.610110\n","4      1.4183    0.27331     4.3505  0.786230\n","...       ...        ...        ...       ...\n","2784  28.5928        NaN        NaN       NaN\n","2785  28.6001        NaN        NaN       NaN\n","2786  28.6077        NaN        NaN       NaN\n","2787  28.6149        NaN        NaN       NaN\n","2788  28.6221        NaN        NaN       NaN\n","\n","[2789 rows x 4 columns]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n","/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:4308: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"],"name":"stderr"},{"output_type":"stream","text":["          RALM  REPM(LQH)  REPM(LSE)       RSQO\n","0    11.442800   5.092500   8.104600  11.660900\n","1     0.828790   0.000985   0.030499   4.620300\n","2     0.007507   0.001257   0.013911   3.443000\n","3     0.000110   0.000131   0.006791   2.931000\n","4     0.000028   0.000047   0.002996   1.526900\n","..         ...        ...        ...        ...\n","97         NaN        NaN        NaN   0.000009\n","98         NaN        NaN        NaN   0.000008\n","99         NaN        NaN        NaN   0.000007\n","100        NaN        NaN        NaN   0.000007\n","101        NaN        NaN        NaN   0.000006\n","\n","[102 rows x 4 columns]\n","       RALM  REPM(LQH)  REPM(LSE)       RSQO\n","0    0.0000     0.0000     0.0000   0.000026\n","1    1.2649     0.5000     1.0856   0.345600\n","2    2.1238     1.5981     1.6515   0.621580\n","3    2.5041     2.0142     2.9352   0.897510\n","4    2.5243     2.0330     3.4650   1.175400\n","..      ...        ...        ...        ...\n","97      NaN        NaN        NaN  28.729300\n","98      NaN        NaN        NaN  29.011700\n","99      NaN        NaN        NaN  29.295500\n","100     NaN        NaN        NaN  29.582200\n","101     NaN        NaN        NaN  29.861400\n","\n","[102 rows x 4 columns]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"FFi3lSohWqft"},"source":["end"]}]}