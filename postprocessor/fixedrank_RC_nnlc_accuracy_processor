{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"fixedrank_RC_nnlc_accuracy_processor","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"WOkcqUr1x7Gk"},"source":["# Fixedrank nonnegativity and equality processor (accuracy)"]},{"cell_type":"markdown","metadata":{"id":"lhtGDVuay1aC"},"source":["# Overall preliminaries"]},{"cell_type":"code","metadata":{"id":"J_v63uV-xx0H"},"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import math"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ibRpNxX4yBfs","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622696006604,"user_tz":-540,"elapsed":103155,"user":{"displayName":"Mitsuaki Obara","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgTc8J_ZbYtCo4EduXT-CtVU_yA3tGcM2yJdBrd=s64","userId":"01228617048231420770"}},"outputId":"96ded916-1a1c-4535-cfa9-8f269b4c4219"},"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","root_dir=\"/content/drive/My Drive/Codes/Seqential-quadratic-programming-on-manifold/\"\n","experiment_name = \"FixedRank_Accuracy\"\n","output_dir = \"postprocessor/\" + experiment_name + \"/\""],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"HWwmTO_8yErG"},"source":["rep = 1\n","dim_set = [[4,8], [5,10], [6,12], [7,14]]\n","rank_set = [2]\n","eqratio_set = [0.5]\n","maskratio_set = [0.5]\n","tol = 16\n","init_tolcheckpow = -3\n","method_set = ['ALM', 'LQH', 'LSE', 'Riemannian_SQP']\n","input_dir = \"result/\" + experiment_name + \"/\""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"y5zj3ppxSl2X"},"source":["## Generate tables (residual vs time, residual vs iteration, average time)"]},{"cell_type":"code","metadata":{"id":"bNGsHgTsQAw2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622696025263,"user_tz":-540,"elapsed":11175,"user":{"displayName":"Mitsuaki Obara","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgTc8J_ZbYtCo4EduXT-CtVU_yA3tGcM2yJdBrd=s64","userId":"01228617048231420770"}},"outputId":"9391283c-e057-405a-ddc7-da3f00cd03a6"},"source":["for maskratio in maskratio_set:\n","  for eqratio in eqratio_set:\n","    for rank in rank_set:\n","      ave_time_output = pd.DataFrame()\n","      for dim in dim_set:\n","        time_output = pd.DataFrame()\n","        iter_output = pd.DataFrame()\n","        ave_time_in_dim = pd.DataFrame()\n","        rdim = dim[0]\n","        cdim = dim[1]\n","\n","        for method in method_set:\n","          data = pd.read_csv(root_dir + input_dir + \"RC_nnlc_%s_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" %(method, rep, rdim, cdim, rank, tol, eqratio, maskratio))\n","          cols = data[['KKT_residual', 'time', 'iter']].copy()\n","          cols.name = method\n","          \n","          tolcheckpow = init_tolcheckpow\n","          time = []\n","          iter = []\n","\n","          ncol = cols.shape[0]\n","          while True:\n","            flag = False\n","            for i in range(ncol):\n","              if (data['KKT_residual'][i] < pow(10, -tolcheckpow)):\n","                time += [data['time'][i]]\n","                iter += [data['iter'][i]]\n","                tolcheckpow += 1\n","                flag = True\n","                break\n","            if not flag:\n","              break\n","\n","          time_outputcol = pd.Series(data = np.array(time), name = method)\n","          time_output = pd.concat([time_output, time_outputcol], axis = 1)\n","          iter_outputcol = pd.Series(data = np.array(iter), name = method)\n","          iter_output = pd.concat([iter_output, iter_outputcol], axis = 1)\n","\n","          total_time = data['time'][-1:].values[0]\n","          total_iter_num = data['time'][-1:].index[0]\n","          ave_time = total_time / total_iter_num\n","          ave_time_in_dim.insert(len(ave_time_in_dim.columns), method, [ave_time])\n","        \n","        ave_time_in_dim[\"dim\"] = str(dim)\n","        ave_time_output = pd.concat([ave_time_output, ave_time_in_dim], axis = 0)\n","        time_fintotal_checkpow = time_output.shape[0] + init_tolcheckpow\n","        time_output[\"log10residual\"] = pd.RangeIndex(start = init_tolcheckpow, stop = time_fintotal_checkpow)\n","        iter_fintotal_checkpow = iter_output.shape[0] + init_tolcheckpow\n","        iter_output[\"log10residual\"] = pd.RangeIndex(start = init_tolcheckpow, stop = iter_fintotal_checkpow)\n","\n","        print(time_output)\n","        time_output.to_csv(root_dir + output_dir + experiment_name + \"_RC_nnlc_ResTimeTable_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" %(rep, rdim, cdim, rank, tol, eqratio, maskratio))\n","        print(iter_output)\n","        iter_output.to_csv(root_dir + output_dir + experiment_name + \"_RC_nnlc_ResIterTable_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" %(rep, rdim, cdim, rank, tol, eqratio, maskratio))\n","\n","      print(ave_time_output)\n","      ave_time_output.to_csv(root_dir + output_dir + experiment_name + \"_RC_nnlc_WholeAveTimeTable_nrep%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" %(rep, rank, tol, eqratio, maskratio))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["       ALM      LQH     LSE  Riemannian_SQP  log10residual\n","0   0.0000  0.00000  0.0000        0.000233             -3\n","1   0.0000  0.00000  0.0000        0.000233             -2\n","2   0.0000  0.00000  0.0000        0.000233             -1\n","3   1.7209  0.00000  1.4825        0.338570              0\n","4   1.8491  0.14073  1.4825        0.573340              1\n","5   1.9603  0.14073  3.6288        0.896170              2\n","6   1.9603  0.37482  4.2103        1.271900              3\n","7   1.9603  0.38711  4.6781        1.332300              4\n","8   2.0210  0.46111  4.9745        1.391700              5\n","9   2.1332  0.69357  5.3953        1.391700              6\n","10  2.2142  0.76140     NaN       11.210400              7\n","11     NaN      NaN     NaN       13.711900              8\n","12     NaN      NaN     NaN       34.220900              9\n","13     NaN      NaN     NaN      263.908900             10\n","     ALM   LQH  LSE  Riemannian_SQP  log10residual\n","0    0.0   0.0  0.0               0             -3\n","1    0.0   0.0  0.0               0             -2\n","2    0.0   0.0  0.0               0             -1\n","3    2.0   0.0  1.0               1              0\n","4    3.0   1.0  1.0               4              1\n","5    4.0   1.0  3.0               8              2\n","6    4.0   2.0  4.0              14              3\n","7    4.0   3.0  5.0              15              4\n","8    6.0   5.0  6.0              16              5\n","9    8.0   7.0  8.0              16              6\n","10  11.0  11.0  NaN             154              7\n","11   NaN   NaN  NaN             197              8\n","12   NaN   NaN  NaN             533              9\n","13   NaN   NaN  NaN            4471             10\n","        ALM      LQH      LSE  Riemannian_SQP  log10residual\n","0    0.0000   0.0000   0.0000        0.000139             -3\n","1    0.0000   0.0000   0.0000        0.000139             -2\n","2    0.0000   0.0000   0.0000        0.000139             -1\n","3    2.2454   1.2071   1.8194        0.397450              0\n","4    5.4625   1.2071   1.8194        0.513920              1\n","5    7.8262   1.2071   6.2554        1.056800              2\n","6    9.9690   3.4714   9.2754        5.517300              3\n","7   16.3509  12.1768  22.4621        5.724600              4\n","8   27.8867  17.3932      NaN        5.827300              5\n","9       NaN      NaN      NaN        5.930400              6\n","10      NaN      NaN      NaN        6.034800              7\n","11      NaN      NaN      NaN        6.240500              8\n","12      NaN      NaN      NaN       22.261300              9\n","13      NaN      NaN      NaN      192.728100             10\n","     ALM   LQH   LSE  Riemannian_SQP  log10residual\n","0    0.0   0.0   0.0               0             -3\n","1    0.0   0.0   0.0               0             -2\n","2    0.0   0.0   0.0               0             -1\n","3    2.0   1.0   1.0               2              0\n","4    5.0   1.0   1.0               3              1\n","5    7.0   1.0   5.0               7              2\n","6    9.0   6.0   7.0              44              3\n","7   14.0  13.0  15.0              46              4\n","8   24.0  19.0   NaN              47              5\n","9    NaN   NaN   NaN              48              6\n","10   NaN   NaN   NaN              49              7\n","11   NaN   NaN   NaN              51              8\n","12   NaN   NaN   NaN             205              9\n","13   NaN   NaN   NaN            1795             10\n","       ALM       LQH     LSE  Riemannian_SQP  log10residual\n","0   0.0000    0.0000  0.0000         0.00015             -3\n","1   0.0000    0.0000  0.0000         0.00015             -2\n","2   0.0000    0.0000  0.0000         0.00015             -1\n","3   2.8730    0.0000  2.0992         0.37458              0\n","4   6.1853    1.4826  2.0992         0.78895              1\n","5  13.8412    9.1375     NaN         1.58680              2\n","6  24.4434   41.9630     NaN         2.19620              3\n","7  24.4434  179.1617     NaN         3.13790              4\n","8  25.9953       NaN     NaN        14.28840              5\n","9  26.2596       NaN     NaN       148.93380              6\n","   ALM     LQH  LSE  Riemannian_SQP  log10residual\n","0    0     0.0  0.0               0             -3\n","1    0     0.0  0.0               0             -2\n","2    0     0.0  0.0               0             -1\n","3    2     0.0  1.0               1              0\n","4    5     1.0  1.0               3              1\n","5   10     6.0  NaN               7              2\n","6   17    28.0  NaN              10              3\n","7   17  2446.0  NaN              15              4\n","8   18     NaN  NaN              75              5\n","9   19     NaN  NaN             766              6\n","        ALM     LQH      LSE  Riemannian_SQP  log10residual\n","0    0.0000  0.0000   0.0000        0.000146             -3\n","1    0.0000  0.0000   0.0000        0.000146             -2\n","2    0.0000  0.0000   0.0000        0.000146             -1\n","3    3.7972  1.1720   2.6136        0.455800              0\n","4    9.1327  1.1720   5.0695        2.018300              1\n","5   19.6572  1.1720  11.8409       30.309500              2\n","6       NaN  1.5825  26.9893       31.184100              3\n","7       NaN  2.7581  65.0780       31.463700              4\n","8       NaN  3.2981      NaN       31.756000              5\n","9       NaN  4.2815      NaN       32.326200              6\n","10      NaN  6.3149      NaN       32.600100              7\n","11      NaN     NaN      NaN       33.149000              8\n","12      NaN     NaN      NaN       33.720300              9\n","     ALM   LQH   LSE  Riemannian_SQP  log10residual\n","0    0.0   0.0   0.0               0             -3\n","1    0.0   0.0   0.0               0             -2\n","2    0.0   0.0   0.0               0             -1\n","3    2.0   1.0   1.0               1              0\n","4    5.0   1.0   2.0               6              1\n","5   11.0   1.0   5.0              98              2\n","6    NaN   2.0  11.0             101              3\n","7    NaN   4.0  27.0             102              4\n","8    NaN   6.0   NaN             103              5\n","9    NaN   8.0   NaN             105              6\n","10   NaN  19.0   NaN             106              7\n","11   NaN   NaN   NaN             108              8\n","12   NaN   NaN   NaN             110              9\n","        ALM       LQH       LSE  Riemannian_SQP      dim\n","0  1.232152  0.019913  0.025065        0.061053   [4, 8]\n","0  1.331746  0.026152  0.035198        0.107991  [5, 10]\n","0  1.385480  0.058953  0.158275        0.192740  [6, 12]\n","0  1.495675  0.039463  0.079149        0.287174  [7, 14]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"QV3DnG2vSrUA"},"source":["## Generate figures (reisudal vs iteration, residual vs time)"]},{"cell_type":"code","metadata":{"id":"-6t7d92LQtHh","colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1tvvHX8wA5t-Y4X63lt-47g6ttyr1O3cX"},"executionInfo":{"status":"ok","timestamp":1622696450056,"user_tz":-540,"elapsed":18845,"user":{"displayName":"Mitsuaki Obara","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgTc8J_ZbYtCo4EduXT-CtVU_yA3tGcM2yJdBrd=s64","userId":"01228617048231420770"}},"outputId":"15d077a8-32fd-4eec-db25-a8758538ece9"},"source":["# make subtables (residual per slc iterations and time per slc iterations) \n","slc = -1\n","for maskratio in maskratio_set:\n","  for eqratio in eqratio_set:\n","    for rank in rank_set:\n","      for dim in dim_set:\n","        fig, axs = plt.subplots(dpi=600)\n","        time = pd.DataFrame()\n","        violation_sum = pd.DataFrame()\n","        rdim = dim[0]\n","        cdim = dim[1]\n","        for method in method_set:\n","          data = pd.read_csv(root_dir + input_dir + \"RC_nnlc_%s_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" %(method, rep, rdim, cdim, rank, tol, eqratio, maskratio))\n","\n","          try:\n","            coltime = data['time'].copy()\n","            coltime.name = method\n","            time = pd.concat([time, coltime], axis = 1)\n","          except:\n","            pass\n","\n","          try:\n","            colviosum = data['KKT_residual'].copy()\n","            colviosum.name = method\n","            violation_sum = pd.concat([violation_sum, colviosum], axis = 1)\n","          except:\n","            pass\n","\n","        # make a residual-iteration table\n","        subviolation_sum = violation_sum.iloc[:slc,:]\n","        subviolation_sum.rename(columns={'ALM' : 'RALM','LSE' : 'REPM(LSE)', 'LQH' : 'REPM(LQH)' , 'Riemannian_SQP': 'RSQO'}, inplace=True)\n","        print(subviolation_sum)\n","        subviolation_sum.to_csv(root_dir + output_dir + experiment_name + \"_RC_nnlc_ResIter%dFigure_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" % (slc, rep, rdim, cdim, rank, tol, eqratio, maskratio))\n","\n","        # make a residual-iteration figure\n","        # plt.xticks(np.arange(subviolation_sum.shape[0]))\n","        # plt.xlim(0, subviolation_sum.shape[0]-1)\n","        # axs.grid(True)\n","        minlog10res = np.log10(subviolation_sum).min().min()\n","        maxlog10res = min(np.log10(subviolation_sum).max().max(), 3)\n","        minlog10res = math.floor(minlog10res) - 2\n","        maxlog10res = math.ceil(maxlog10res) + 1\n","        # xtime_array = np.arange(start = mintime, stop = maxtime, step = 0.1)\n","        # plt.xlim(0, maxtime)\n","        plt.ylim(minlog10res, maxlog10res)\n","\n","        xaxis = np.arange(subviolation_sum.shape[0])\n","        color_set = ['C0','C1','C2','C4']\n","        for i in range(4):\n","          algo_name = subviolation_sum.columns[i]\n","          logyaxis = np.log10(subviolation_sum[algo_name])\n","          color_name = color_set[i]\n","          axs.plot(xaxis, logyaxis, label = algo_name, color = color_name)\n","\n","        # axs.plot(np.arange(subviolation_sum.shape[0]), np.log10(subviolation_sum), label = subviolation_sum.columns)\n","        axs.legend(subviolation_sum.columns, loc='upper right')\n","        # axs.hlines(-1 * tol, 0, max(time.max()), \"black\", linestyles='dashed') # hlines\n","        axs.set(xlabel = \"Iteration\")\n","        axs.set(ylabel = 'Residual (log10 scale)')\n","        plt.subplots_adjust(wspace=0.3, hspace=0.3)\n","        title = \"%s_RC_nnlc_ResIter%dFigure_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e\" % (experiment_name, slc, rep, rdim, cdim, rank, tol, eqratio, maskratio)\n","        plt.savefig(root_dir + output_dir + title + \".pdf\")\n","        # plt.close()\n","\n","        # make a time-iteration table\n","        subtime = time.iloc[:slc,:]\n","        subtime.rename(columns={'ALM' : 'RALM','LSE' : 'REPM(LSE)', 'LQH' : 'REPM(LQH)' ,'fmincon_SQP': 'fmincon SQO', 'Riemannian_SQP': 'RSQO'}, inplace=True)\n","        print(subtime)\n","        subtime.to_csv(root_dir + output_dir + experiment_name + \"_RC_nnlc_ResIter%dFigure_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" % (slc, rep, rdim, cdim, rank, tol, eqratio, maskratio))\n","\n","        # reset figure\n","        restime_fig, restime_axs = plt.subplots(dpi=600)\n","\n","        # make a residual-time table for the first slc iterations\n","        mintime = subtime.min().min()  # take min() twice for the overall minimal time \n","        maxtime = subtime.max().max()\n","        mintime = math.floor(mintime)\n","        maxtime = math.ceil(maxtime) + 1\n","\n","        minlog10res = np.log10(subviolation_sum).min().min()\n","        maxlog10res = min(np.log10(subviolation_sum).max().max(), 3)\n","        minlog10res = math.floor(minlog10res) - 2\n","        maxlog10res = math.ceil(maxlog10res) + 1\n","        # xtime_array = np.arange(start = mintime, stop = maxtime, step = 0.1)\n","        # plt.xlim(0, maxtime)\n","        plt.ylim(minlog10res, maxlog10res)\n","        restime_axs.grid(True)\n","\n","        color_set = ['C0','C1','C2','C4']\n","        for method, color in zip(method_set, color_set):\n","          method_time = time[method].values\n","          method_residual = violation_sum[method].values\n","          restime_axs.plot(method_time, np.log10(method_residual), color = color)\n","        restime_axs.legend(subviolation_sum.columns, loc='upper right', fontsize = 'small')\n","        restime_axs.set(xlabel = \"Time\")\n","        restime_axs.set(ylabel = 'Residual (log10 scale)')\n","        plt.subplots_adjust(wspace=0.3, hspace=0.3)\n","        title = \"%s_RC_nnlc_ResTime%dFigure_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e\" % (experiment_name, slc, rep, rdim, cdim, rank, tol, eqratio, maskratio)\n","        plt.savefig(root_dir + output_dir + title + \".pdf\")\n","        # plt.close()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"FFi3lSohWqft"},"source":["end"]}]}