function plotperfprof_RC
    
    row_dim = [2,3,4,5,6];
    ftol = 1.02; % the tolerance ratio of function value (Won't be used, just a heritage)
    
    fig = figure;
    startingsolver = [1 1 1 1];

    for rdim = row_dim
        if rdim == 7
            tolKKTrespowerset = [2, 3, 4, 5, 6]; % 1e-* tolerance
        elseif rdim == 6
            tolKKTrespowerset = [2, 3, 4, 5, 6, 7]; % 1e-* tolerance
        else
            tolKKTrespowerset = [2, 3, 4, 5, 6, 7, 8]; % 1e-* tolerance
        end
      
        if rdim == 2
            col_ratio = [1.5 ,2];
        else
            col_ratio = [1.5, 1.75 ,2];
        end
        for tolKKTres = tolKKTrespowerset
            for cratio = col_ratio
                cdim = ceil(cratio * rdim);
                filename = sprintf("with_SQP_zz_RC_nn_RDim%dCDim%dTol%d.dat", rdim, cdim, tolKKTres);
                titlename = sprintf("Dimension Row:%d Col:%d Residual: 1e-%d", rdim, cdim, tolKKTres)
                locs = sprintf('southeast');
            
                data = csvread(filename);
                [nrow, ~] = size(data);

                T = zeros(nrow, 4);
                for ii = 1 : nrow
                    extable = data(ii, 1 : 12);
                    extable = extable';
                    extable = reshape(extable, [3, 4]);
                    extable(extable == 0) = eps;
                    [T(ii, :), ~,~,~] = timeplotprof(extable, ftol, constrtol);
                end

                subplot(4,4,plotnum); % nn
                %subplot(3,2,plotnum);
                perf(T(:,startingsolver(plotnum):4), 1, plotnum);
            end
        end
    end

    
    function perf(T, logplot, plotnum)
        if (nargin< 2) 
            logplot = 0; 
        end
        
        colors = ['m' 'b' 'r' 'g' 'r' 'k' 'y'];
        co = [0 0 1;
              0 0.5 0;
              1 0 0;
              0 0.75 0.75;
              0.75 0 0.75;
              0.75 0.75 0;
              0.25 0.25 0.25];
        
        lines = {'--' '-' '-.' '-' '--' '--', '--'};
       
        markers = [' ' ' ' ' ' ' ' ' ' '.' '.' ' '];
       
        [np,ns] = size(T);
        minperf = min(T, [], 2);
        r = zeros(np, ns);
        for p = 1: np
            r(p,:) = T(p,:)/minperf(p);
        end
        if (logplot) 
            r = log2(r); 
        end
        
        disp(r)

        max_ratio = max(max(r));
        r(find(isnan(r))) = 2*(max_ratio);
        r = sort(r);
        
        disp(r)
        
        %if ns == 7
        %    r = circshift(r, [0,-1]);
        %end
        %if ns == 7
            for s = 1: ns
                [xs, ys] = stairs(r(:,s), [1 : np]/np);
                plot(xs, ys, 'LineStyle', lines{s});
                hold on;
            end
        %else
        %    for s = 1: ns
        %        [xs, ys] = stairs(r(:,s), [1 : np]/np);
        %        plot(xs, ys, 'LineStyle', lines{s});
        %        hold on;
        %    end            
        %end
        
            
        axis([ -0.1 1*(max_ratio)+0.01 0 1 ]);
        %axis([ 0 2*(max_ratio)+0.01 0 1 ]);
        
        
        %if ns == 7
        %    legend({'RALM','REPMS($Q^{lqh}$)', 'REPMS($Q^{lse}$)', 'fmincon_interior_point', 'fmincon_SQP','Riemannian SQP','REPMSD'},'Location',locs{plotnum},'Interpreter','latex');
        %else
            legend({'RALM','REPMS($Q^{lqh}$)', 'REPMS($Q^{lse}$)','Riemannian SQP'},'Location',locs{plotnum},'Interpreter','latex');
        %end
        ylabel('Performance Profile');
        xlabel('$$\log_2\tau$','Interpreter','latex');
        title(titlenames(plotnum));
    end

    %response = fig2plotly(fig, 'filename', 'matlab-basic-line');
    %plotly_url = response.url;

end
