{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Fixedrank_nonnegativity_equality_robustness_processor","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"WOkcqUr1x7Gk"},"source":["# Fixedrank nonnegativity and equality processor (robustness)"]},{"cell_type":"markdown","metadata":{"id":"lhtGDVuay1aC"},"source":["# Overall preliminaries"]},{"cell_type":"code","metadata":{"id":"J_v63uV-xx0H"},"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import math\n","import gc"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ibRpNxX4yBfs","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1614580498801,"user_tz":-540,"elapsed":23360,"user":{"displayName":"Mitsuaki Obara","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgTc8J_ZbYtCo4EduXT-CtVU_yA3tGcM2yJdBrd=s64","userId":"01228617048231420770"}},"outputId":"fc14f934-f525-4e3d-d7a0-6d87c3dc4482"},"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","root_dir=\"/content/drive/My Drive/Codes/Seqential-quadratic-programming-on-manifold/\"\n","experiment_name = \"FixedRank_Robustness\"\n","output_dir = \"postprocessor/\" + experiment_name + \"/\""],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"HWwmTO_8yErG"},"source":["rep_set = 20\n","dim_set = [[4,8], [5,10]]\n","rank_set = [2]\n","eqratio_set = [0.5]\n","maskratio_set = [0.5]\n","tol = 6\n","init_tolcheckpow = -3\n","method_set = ['ALM', 'LQH', 'LSE', 'Riemannian_SQP']\n","input_dir = \"result/\" + experiment_name + \"/\""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"y5zj3ppxSl2X"},"source":["## Generate tables (residual vs time, residual vs iterations, robustness)"]},{"cell_type":"code","metadata":{"id":"bNGsHgTsQAw2"},"source":["  for maskratio in maskratio_set:\n","    for eqratio in eqratio_set:\n","      for rank in rank_set:\n","        for dim in dim_set:\n","          gc.collect()\n","          robustness_table = pd.DataFrame()\n","          for rep in range(1, rep_set+1):\n","            time_output = pd.DataFrame()\n","            iter_output = pd.DataFrame()\n","            ave_time_in_dim = pd.DataFrame()\n","            rdim = dim[0]\n","            cdim = dim[1]\n","            for method in method_set:\n","              data = pd.read_csv(root_dir + input_dir + \"RC_nnlc_%s_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" %(method, rep, rdim, cdim, rank, tol, eqratio, maskratio))\n","              cols = data[['KKT_residual', 'time', 'iter']].copy()\n","              cols.name = method\n","              \n","              tolcheckpow = init_tolcheckpow\n","              time = []\n","              iter = []\n","\n","              ncol = cols.shape[0]\n","              while True:\n","                flag = False\n","                for i in range(ncol):\n","                  if (data['KKT_residual'][i] < pow(10, -tolcheckpow)):\n","                    time += [data['time'][i]]\n","                    iter += [data['iter'][i]]\n","                    tolcheckpow += 1\n","                    flag = True\n","                    break\n","                if not flag:\n","                  break\n","\n","              if tolcheckpow >= tol:\n","                reached_info = pd.DataFrame()\n","                reached_info[\"method\"] = [method]\n","                reached_info[\"nrep\"] = [rep]\n","                reached_info[\"time\"] = [time[-1]]\n","                reached_info[\"iter\"] = [iter[-1]]\n","                print(reached_info)\n","                robustness_table = pd.concat([robustness_table, reached_info],axis = 0)\n","\n","\n","              time_outputcol = pd.Series(data = np.array(time), name = method)\n","              time_output = pd.concat([time_output, time_outputcol], axis = 1)\n","              iter_outputcol = pd.Series(data = np.array(iter), name = method)\n","              iter_output = pd.concat([iter_output, iter_outputcol], axis = 1)\n","\n","              total_time = data['time'][-1:].values[0]\n","              total_iter_num = data['time'][-1:].index[0]\n","              ave_time = total_time / total_iter_num\n","              ave_time_in_dim.insert(len(ave_time_in_dim.columns), method, [ave_time])\n","            \n","            time_fintotal_checkpow = time_output.shape[0] + init_tolcheckpow\n","            time_output[\"log10residual\"] = pd.RangeIndex(start = init_tolcheckpow, stop = time_fintotal_checkpow)\n","            iter_fintotal_checkpow = iter_output.shape[0] + init_tolcheckpow\n","            iter_output[\"log10residual\"] = pd.RangeIndex(start = init_tolcheckpow, stop = iter_fintotal_checkpow)\n","\n","            print(time_output)\n","            time_output.to_csv(root_dir + output_dir + experiment_name + \"_RC_nnlc_ResTimeTable_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" %(rep, rdim, cdim, rank, tol, eqratio, maskratio))\n","            print(iter_output)\n","            iter_output.to_csv(root_dir + output_dir + experiment_name + \"_RC_nnlc_ResIterTable_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" %(rep, rdim, cdim, rank, tol, eqratio, maskratio))\n","          \n","          print(robustness_table)\n","          robustness_table.to_csv(root_dir + output_dir + experiment_name + \"_RC_nnlc_RobustTable_Rowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" %(rdim, cdim, rank, tol, eqratio, maskratio), index = False)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-xOnVLNlUhba"},"source":["## Aggregation"]},{"cell_type":"code","metadata":{"id":"agFu6Et_UjIM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1614580513185,"user_tz":-540,"elapsed":37740,"user":{"displayName":"Mitsuaki Obara","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgTc8J_ZbYtCo4EduXT-CtVU_yA3tGcM2yJdBrd=s64","userId":"01228617048231420770"}},"outputId":"be11a19b-e756-4be7-a667-d6f4a8ac1937"},"source":["robustness_table_name = \"RC_nnlc_RobustTable\"\n","for maskratio in maskratio_set:\n","  for eqratio in eqratio_set:\n","    for rank in rank_set:\n","      for dim in dim_set:\n","        rdim = dim[0]\n","        cdim = dim[1]\n","        path = root_dir + output_dir + experiment_name + \"_\" + robustness_table_name + \"_\" + \"Rowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" %(rdim, cdim, rank, tol, eqratio, maskratio)\n","        data = pd.read_csv(path)\n","        aggregation_table = pd.DataFrame()\n","        for method in method_set:\n","          series_per_method = pd.Series()\n","          method_result = data[data[\"method\"] == method]\n","          instance_num = len(method_result)\n","          series_per_method[\"method\"] = method\n","          if instance_num == 0:\n","            series_per_method[\"number\"] = 0\n","            series_per_method[\"ave_time\"] = 0\n","            series_per_method[\"ave_iter\"] = 0\n","            series_per_method[\"max_time\"] = 0\n","            series_per_method[\"max_iter\"] = 0\n","          else:\n","            series_per_method[\"number\"] = instance_num\n","            mean_method_result = method_result.mean()\n","            series_per_method[\"ave_time\"] = mean_method_result[\"time\"]\n","            series_per_method[\"ave_iter\"] = mean_method_result[\"iter\"]\n","            max_method_result = method_result.max()\n","            series_per_method[\"max_time\"] = max_method_result[\"time\"]\n","            series_per_method[\"max_iter\"] = max_method_result[\"iter\"]\n","          aggregation_table = pd.concat([aggregation_table, series_per_method],axis = 1)\n","        print(aggregation_table)\n","        aggregation_table.to_csv(root_dir + output_dir + experiment_name + \"_RC_nnlc_AggregationTable_Rowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" %(rdim, cdim, rank, tol, eqratio, maskratio), index = False)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:19: DeprecationWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.\n"],"name":"stderr"},{"output_type":"stream","text":["                0        0        0               0\n","method        ALM      LQH      LSE  Riemannian_SQP\n","number         13       18       14              20\n","ave_time  2.07583  11.2075  9.55079         1.31967\n","ave_iter  21.6923  773.611  375.143           29.75\n","max_time   4.9206  53.1041  49.5327          6.4881\n","max_iter       30     3867     2819             154\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:19: DeprecationWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.\n"],"name":"stderr"},{"output_type":"stream","text":["                0        0        0               0\n","method        ALM      LQH      LSE  Riemannian_SQP\n","number         17       16       14              20\n","ave_time  3.58983  7.97892  10.2498         3.37952\n","ave_iter  21.7647  438.062    318.5            46.9\n","max_time   7.8243  20.3552   39.493          36.076\n","max_iter       31     1252     1464             515\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:19: DeprecationWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.\n"],"name":"stderr"},{"output_type":"stream","text":["                0        0        0               0\n","method        ALM      LQH      LSE  Riemannian_SQP\n","number          7       19       13              20\n","ave_time  3.93137  3.25849  14.4543         1.25939\n","ave_iter  23.1429      174  669.923            29.8\n","max_time   8.7295  12.4025  35.1472         10.1564\n","max_iter       30      845     1942             256\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:19: DeprecationWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.\n"],"name":"stderr"},{"output_type":"stream","text":["                0        0        0               0\n","method        ALM      LQH      LSE  Riemannian_SQP\n","number          9       12       15              15\n","ave_time  8.91062  12.1281  16.0163         1.39936\n","ave_iter  22.7778   599.75    333.2              19\n","max_time  16.9075  53.8429  51.4667          6.0679\n","max_iter       34     3040     1324              85\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:19: DeprecationWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.\n"],"name":"stderr"},{"output_type":"stream","text":["                0        0        0               0\n","method        ALM      LQH      LSE  Riemannian_SQP\n","number         13       14       15              20\n","ave_time  2.52006  11.2326  8.72223         4.48412\n","ave_iter  19.7692  793.357    360.8           100.7\n","max_time    8.287  31.8808  54.7285         32.9497\n","max_iter       22     2205     2897             726\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:19: DeprecationWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.\n"],"name":"stderr"},{"output_type":"stream","text":["                0        0        0               0\n","method        ALM      LQH      LSE  Riemannian_SQP\n","number          8        5        4              20\n","ave_time  4.71369   9.9457  9.78083         7.29428\n","ave_iter    21.75    537.6   256.75           90.85\n","max_time  11.1081  18.9475  15.8556         48.6257\n","max_iter       27     1093      343             569\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:19: DeprecationWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.\n"],"name":"stderr"},{"output_type":"stream","text":["                0        0        0               0\n","method        ALM      LQH      LSE  Riemannian_SQP\n","number          5       12       14              19\n","ave_time  4.01104  10.5045  10.0905         3.31376\n","ave_iter     21.8  716.667  385.571         72.4211\n","max_time   5.2098  40.8454  27.0672         28.0827\n","max_iter       29     3027     1474             636\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:19: DeprecationWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.\n"],"name":"stderr"},{"output_type":"stream","text":["                0        0        0               0\n","method        ALM      LQH      LSE  Riemannian_SQP\n","number          4        9        6              20\n","ave_time  3.94778  18.6882  25.9636          8.6561\n","ave_iter    19.75  949.778  720.833           118.3\n","max_time   6.0697  50.2584  47.2543         53.8953\n","max_iter       21     2686     1602             737\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:19: DeprecationWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.\n"],"name":"stderr"},{"output_type":"stream","text":["                 0        0        0               0\n","method         ALM      LQH      LSE  Riemannian_SQP\n","number          14       20       19              20\n","ave_time  0.915239  5.68208  10.2177         1.01694\n","ave_iter   19.6429    444.9  519.526              23\n","max_time    1.6318  32.9344  49.0221          1.8075\n","max_iter        24     2621     2673              36\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:19: DeprecationWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.\n"],"name":"stderr"},{"output_type":"stream","text":["                0        0        0               0\n","method        ALM      LQH      LSE  Riemannian_SQP\n","number         13       18       16              20\n","ave_time  2.07644  9.83977  5.56442         2.43523\n","ave_iter  19.4615  624.167  112.938           30.75\n","max_time   3.6376  57.2319  16.7069          6.9955\n","max_iter       22     3773      534              83\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:19: DeprecationWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.\n"],"name":"stderr"},{"output_type":"stream","text":["                 0        0        0               0\n","method         ALM      LQH      LSE  Riemannian_SQP\n","number          15       19       20              20\n","ave_time  0.985113  10.1576  6.60098         1.17526\n","ave_iter   19.0667  789.211   321.75            25.9\n","max_time    1.7191  37.8916  58.2635          2.6094\n","max_iter        22     2957     3385              55\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:19: DeprecationWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.\n"],"name":"stderr"},{"output_type":"stream","text":["                0        0        0               0\n","method        ALM      LQH      LSE  Riemannian_SQP\n","number         11       18       18              20\n","ave_time  1.76359    9.887  9.72274         5.71789\n","ave_iter  21.0909  625.222  304.056              70\n","max_time   2.9375   57.857  47.0309         44.1255\n","max_iter       31     3658     2036             523\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"QV3DnG2vSrUA"},"source":["## ResIter, ResTime Figures (will be error due to RAM crash)"]},{"cell_type":"code","metadata":{"id":"-6t7d92LQtHh"},"source":["# make subtables (residual per slc iterations and time per slc iterations) \n","slc = -1\n","for rep in range(1, rep_set+1):\n","  for maskratio in maskratio_set:\n","    for eqratio in eqratio_set:\n","      for rank in rank_set:\n","        for dim in dim_set:\n","          gc.collect()\n","          fig, axs = plt.subplots(dpi=600)\n","          time = pd.DataFrame()\n","          violation_sum = pd.DataFrame()\n","          rdim = dim[0]\n","          cdim = dim[1]\n","          for method in method_set:\n","            data = pd.read_csv(root_dir + input_dir + \"RC_nnlc_%s_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" %(method, rep, rdim, cdim, rank, tol, eqratio, maskratio))\n","\n","            try:\n","              coltime = data['time'].copy()\n","              coltime.name = method\n","              time = pd.concat([time, coltime], axis = 1)\n","              del coltime\n","            except:\n","              pass\n","\n","            try:\n","              colviosum = data['KKT_residual'].copy()\n","              colviosum.name = method\n","              violation_sum = pd.concat([violation_sum, colviosum], axis = 1)\n","              del colviosum\n","            except:\n","              pass\n","\n","          # make a residual-iteration table\n","          subviolation_sum = violation_sum.iloc[:slc,:]\n","          subviolation_sum.rename(columns={'ALM' : 'RALM','LSE' : 'REPM(LSE)', 'LQH' : 'REPM(LQH)' , 'Riemannian_SQP': 'RSQO'}, inplace=True)\n","          #print(subviolation_sum)\n","          subviolation_sum.to_csv(root_dir + output_dir + experiment_name + \"_RC_nnlc_ResIter%dFigure_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" % (slc, rep, rdim, cdim, rank, tol, eqratio, maskratio))\n","\n","          # make a residual-iteration figure\n","          #plt.xticks(np.arange(subviolation_sum.shape[0]))\n","          #plt.xlim(0, subviolation_sum.shape[0]-1)\n","          #axs.grid(True)\n","          minlog10res = np.log10(subviolation_sum).min().min()\n","          maxlog10res = min(np.log10(subviolation_sum).max().max(), 3)\n","          minlog10res = math.floor(minlog10res) - 2\n","          maxlog10res = math.ceil(maxlog10res) + 1\n","          # xtime_array = np.arange(start = mintime, stop = maxtime, step = 0.1)\n","          #plt.xlim(0, maxtime)\n","          plt.ylim(minlog10res, maxlog10res)\n","          axs.plot(np.arange(subviolation_sum.shape[0]), np.log10(subviolation_sum), label = subviolation_sum.columns)\n","          axs.legend(subviolation_sum.columns, loc='upper right')\n","          #axs.hlines(-1 * tol, 0, max(time.max()), \"black\", linestyles='dashed') # hlines\n","          axs.set(xlabel = \"Iteration\")\n","          axs.set(ylabel = 'Residual (log10 scale)')\n","          plt.subplots_adjust(wspace=0.3, hspace=0.3)\n","          title = \"%s_RC_nnlc_ResIter%dFigure_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e\" % (experiment_name, slc, rep, rdim, cdim, rank, tol, eqratio, maskratio)\n","          plt.savefig(root_dir + output_dir + title + \".pdf\")\n","          plt.close()\n","\n","          # make a time-iteration table\n","          subtime = time.iloc[:slc,:]\n","          subtime.rename(columns={'ALM' : 'RALM','LSE' : 'REPM(LSE)', 'LQH' : 'REPM(LQH)' ,'fmincon_SQP': 'fmincon SQO', 'Riemannian_SQP': 'RSQO'}, inplace=True)\n","          #print(subtime)\n","          subtime.to_csv(root_dir + output_dir + experiment_name + \"_RC_nnlc_ResIter%dFigure_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e.csv\" % (slc, rep, rdim, cdim, rank, tol, eqratio, maskratio))\n","\n","          # reset figure\n","          restime_fig, restime_axs = plt.subplots(dpi=600)\n","\n","          # make a residual-time table for the first slc iterations\n","          mintime = subtime.min().min()  # take min() twice for the overall minimal time \n","          maxtime = subtime.max().max()\n","          mintime = math.floor(mintime)\n","          maxtime = math.ceil(maxtime) + 1\n","\n","          minlog10res = np.log10(subviolation_sum).min().min()\n","          maxlog10res = min(np.log10(subviolation_sum).max().max(), 3)\n","          minlog10res = math.floor(minlog10res) - 2\n","          maxlog10res = math.ceil(maxlog10res) + 1\n","          # xtime_array = np.arange(start = mintime, stop = maxtime, step = 0.1)\n","          #plt.xlim(0, maxtime)\n","          plt.ylim(minlog10res, maxlog10res)\n","          restime_axs.grid(True)\n","          for method in method_set:\n","            method_time = time[method].values\n","            method_residual = violation_sum[method].values\n","            restime_axs.plot(method_time, np.log10(method_residual))\n","          restime_axs.legend(subviolation_sum.columns, loc='upper right', fontsize = 'small')\n","          restime_axs.set(xlabel = \"Time\")\n","          restime_axs.set(ylabel = 'Residual (log10 scale)')\n","          plt.subplots_adjust(wspace=0.3, hspace=0.3)\n","          title = \"%s_RC_nnlc_ResTime%dFigure_nrep%dRowdim%dColdim%dRank%dTol%dEqratio%0.1eMaskratio%0.1e\" % (experiment_name, slc, rep, rdim, cdim, rank, tol, eqratio, maskratio)\n","          plt.savefig(root_dir + output_dir + title + \".pdf\")\n","          plt.close()\n","\n","          # memory free\n","          del fig\n","          del axs\n","          del violation_sum\n","          del time\n","          del data\n","          gc.collect()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FFi3lSohWqft"},"source":["end"]}]}